
I2S to USB FS bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008598  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008938  08008938  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008940  08008940  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008944  08008944  00018944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08008948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  20000124  08008a6c  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a4c  08008a6c  00020a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017852  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034ea  00000000  00000000  000379a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001038  00000000  00000000  0003ae90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  0003bec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025b4b  00000000  00000000  0003cd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe23  00000000  00000000  000628b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9721  00000000  00000000  000726d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bdf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004924  00000000  00000000  0014be74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008760 	.word	0x08008760

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	08008760 	.word	0x08008760

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 ffab 	bl	800151e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f82c 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f970 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f950 	bl	8000874 <MX_DMA_Init>
  MX_I2S2_Init();
 80005d4:	f000 f8c4 	bl	8000760 <MX_I2S2_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 f8ee 	bl	80007b8 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005dc:	f000 f91c 	bl	8000818 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  USBD_Init(&hUsbDeviceFS, &Class_Desc, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	490b      	ldr	r1, [pc, #44]	; (8000610 <main+0x50>)
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <main+0x54>)
 80005e6:	f006 f859 	bl	800669c <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_TEMPLATE_ClassDriver);
 80005ea:	490b      	ldr	r1, [pc, #44]	; (8000618 <main+0x58>)
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <main+0x54>)
 80005ee:	f006 f899 	bl	8006724 <USBD_RegisterClass>
  USBD_Start(&hUsbDeviceFS);
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <main+0x54>)
 80005f4:	f006 f8c4 	bl	8006780 <USBD_Start>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fc:	f000 ffec 	bl	80015d8 <HAL_Delay>
		HAL_UART_Transmit(&huart2, "Stm32CustomUSBDeviceClass\n", 26, 1000);
 8000600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000604:	221a      	movs	r2, #26
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <main+0x5c>)
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <main+0x60>)
 800060a:	f004 f8af 	bl	800476c <HAL_UART_Transmit>
		HAL_Delay(1000);
 800060e:	e7f3      	b.n	80005f8 <main+0x38>
 8000610:	20000004 	.word	0x20000004
 8000614:	20000150 	.word	0x20000150
 8000618:	20000054 	.word	0x20000054
 800061c:	08008778 	.word	0x08008778
 8000620:	20000884 	.word	0x20000884

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0b4      	sub	sp, #208	; 0xd0
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f007 f95e 	bl	80078f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f007 f94f 	bl	80078f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b3f      	ldr	r3, [pc, #252]	; (8000754 <SystemClock_Config+0x130>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a3e      	ldr	r2, [pc, #248]	; (8000754 <SystemClock_Config+0x130>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <SystemClock_Config+0x130>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <SystemClock_Config+0x134>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a39      	ldr	r2, [pc, #228]	; (8000758 <SystemClock_Config+0x134>)
 8000674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <SystemClock_Config+0x134>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000686:	2301      	movs	r3, #1
 8000688:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a2:	2308      	movs	r3, #8
 80006a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a8:	23d8      	movs	r3, #216	; 0xd8
 80006aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006b4:	2309      	movs	r3, #9
 80006b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 f824 	bl	800370c <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ca:	f000 f949 	bl	8000960 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ce:	f002 ffcd 	bl	800366c <HAL_PWREx_EnableOverDrive>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006d8:	f000 f942 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000702:	2107      	movs	r1, #7
 8000704:	4618      	mov	r0, r3
 8000706:	f003 faa5 	bl	8003c54 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000710:	f000 f926 	bl	8000960 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2S
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <SystemClock_Config+0x138>)
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000718:	2360      	movs	r3, #96	; 0x60
 800071a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800072c:	2300      	movs	r3, #0
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000730:	2300      	movs	r3, #0
 8000732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4618      	mov	r0, r3
 800073c:	f003 fc80 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000746:	f000 f90b 	bl	8000960 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	37d0      	adds	r7, #208	; 0xd0
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000
 800075c:	00200081 	.word	0x00200081

08000760 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_I2S2_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2S2_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_I2S2_Init+0x4c>)
 800076c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000770:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_I2S2_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_I2S2_Init+0x4c>)
 800077a:	2203      	movs	r2, #3
 800077c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_I2S2_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_I2S2_Init+0x4c>)
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <MX_I2S2_Init+0x54>)
 8000788:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_I2S2_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_I2S2_Init+0x4c>)
 8000792:	2202      	movs	r2, #2
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_I2S2_Init+0x4c>)
 8000798:	f001 fcee 	bl	8002178 <HAL_I2S_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2S2_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f8dd 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000904 	.word	0x20000904
 80007b0:	40003800 	.word	0x40003800
 80007b4:	00017700 	.word	0x00017700

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007be:	4a15      	ldr	r2, [pc, #84]	; (8000814 <MX_USART2_UART_Init+0x5c>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART2_UART_Init+0x58>)
 80007fc:	f003 ff68 	bl	80046d0 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 f8ab 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000884 	.word	0x20000884
 8000814:	40004400 	.word	0x40004400

08000818 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000822:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	2206      	movs	r2, #6
 8000828:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000832:	2202      	movs	r2, #2
 8000834:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2201      	movs	r2, #1
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	f001 fdbc 	bl	80023d8 <HAL_PCD_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f87b 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000420 	.word	0x20000420

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_DMA_Init+0x38>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <MX_DMA_Init+0x38>)
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_DMA_Init+0x38>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	200e      	movs	r0, #14
 8000898:	f000 ff9b 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800089c:	200e      	movs	r0, #14
 800089e:	f000 ffb4 	bl	800180a <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_GPIO_Init+0xa8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_GPIO_Init+0xa8>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_GPIO_Init+0xa8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_GPIO_Init+0xa8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <MX_GPIO_Init+0xa8>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_GPIO_Init+0xa8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_GPIO_Init+0xa8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <MX_GPIO_Init+0xa8>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_GPIO_Init+0xa8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_GPIO_Init+0xa8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a11      	ldr	r2, [pc, #68]	; (8000958 <MX_GPIO_Init+0xa8>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_GPIO_Init+0xa8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <MX_GPIO_Init+0xac>)
 800092e:	f001 fc09 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000932:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_GPIO_Init+0xac>)
 800094c:	f001 fa60 	bl	8001e10 <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40020800 	.word	0x40020800

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x44>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x44>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x44>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x44>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x44>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a3c      	ldr	r2, [pc, #240]	; (8000ac8 <HAL_I2S_MspInit+0x110>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d171      	bne.n	8000abe <HAL_I2S_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <HAL_I2S_MspInit+0x114>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a3b      	ldr	r2, [pc, #236]	; (8000acc <HAL_I2S_MspInit+0x114>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <HAL_I2S_MspInit+0x114>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <HAL_I2S_MspInit+0x114>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a35      	ldr	r2, [pc, #212]	; (8000acc <HAL_I2S_MspInit+0x114>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <HAL_I2S_MspInit+0x114>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <HAL_I2S_MspInit+0x114>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a2f      	ldr	r2, [pc, #188]	; (8000acc <HAL_I2S_MspInit+0x114>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <HAL_I2S_MspInit+0x114>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a22:	2302      	movs	r3, #2
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a32:	2305      	movs	r3, #5
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4824      	ldr	r0, [pc, #144]	; (8000ad0 <HAL_I2S_MspInit+0x118>)
 8000a3e:	f001 f9e7 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000a42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a54:	2305      	movs	r3, #5
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481d      	ldr	r0, [pc, #116]	; (8000ad4 <HAL_I2S_MspInit+0x11c>)
 8000a60:	f001 f9d6 	bl	8001e10 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_I2S_MspInit+0x124>)
 8000a68:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a82:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000aa4:	f000 fecc 	bl	8001840 <HAL_DMA_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_I2S_MspInit+0xfa>
    {
      Error_Handler();
 8000aae:	f7ff ff57 	bl	8000960 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_I2S_MspInit+0x120>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40003800 	.word	0x40003800
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	20000824 	.word	0x20000824
 8000adc:	40026058 	.word	0x40026058

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x7c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d127      	bne.n	8000b52 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b32:	230c      	movs	r3, #12
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b42:	2307      	movs	r3, #7
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000b4e:	f001 f95f 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000

08000b68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b88:	d149      	bne.n	8000c1e <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <HAL_PCD_MspInit+0xc0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a26      	ldr	r2, [pc, #152]	; (8000c28 <HAL_PCD_MspInit+0xc0>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <HAL_PCD_MspInit+0xc0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481d      	ldr	r0, [pc, #116]	; (8000c2c <HAL_PCD_MspInit+0xc4>)
 8000bb8:	f001 f92a 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bce:	230a      	movs	r3, #10
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <HAL_PCD_MspInit+0xc4>)
 8000bda:	f001 f919 	bl	8001e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_PCD_MspInit+0xc0>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <HAL_PCD_MspInit+0xc0>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_PCD_MspInit+0xc0>)
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_PCD_MspInit+0xc0>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_PCD_MspInit+0xc0>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_PCD_MspInit+0xc0>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2043      	movs	r0, #67	; 0x43
 8000c14:	f000 fddd 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000c18:	2043      	movs	r0, #67	; 0x43
 8000c1a:	f000 fdf6 	bl	800180a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 fc88 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <DMA1_Stream3_IRQHandler+0x10>)
 8000c92:	f000 fe83 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000824 	.word	0x20000824

08000ca0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <OTG_FS_IRQHandler+0x10>)
 8000ca6:	f001 fcdd 	bl	8002664 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000420 	.word	0x20000420

08000cb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00a      	b.n	8000cdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cc6:	f3af 8000 	nop.w
 8000cca:	4601      	mov	r1, r0
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	60ba      	str	r2, [r7, #8]
 8000cd2:	b2ca      	uxtb	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf0      	blt.n	8000cc6 <_read+0x12>
	}

return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e009      	b.n	8000d14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf1      	blt.n	8000d00 <_write+0x12>
	}
	return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_close>:

int _close(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_isatty>:

int _isatty(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
	return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f006 fd6e 	bl	80078a0 <__errno>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20040000 	.word	0x20040000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	20000140 	.word	0x20000140
 8000df8:	20000a50 	.word	0x20000a50

08000dfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <SystemInit+0x28>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <SystemInit+0x28>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SystemInit+0x28>)
 8000e12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e16:	609a      	str	r2, [r3, #8]
#endif
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <USBD_Get_USB_Status>:
 * @brief  Retuns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	if (hal_status == HAL_OK)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <USBD_Get_USB_Status+0x14>
		return USBD_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e005      	b.n	8000e48 <USBD_Get_USB_Status+0x20>
	else if (hal_status == HAL_BUSY)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d101      	bne.n	8000e46 <USBD_Get_USB_Status+0x1e>
		return USBD_BUSY;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <USBD_Get_USB_Status+0x20>
	else
		return USBD_FAIL;
 8000e46:	2303      	movs	r3, #3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <USBD_LL_Init>:
 * @brief  Initializes the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	hpcd_USB_OTG_FS.pData = pdev;
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <USBD_LL_Init+0x40>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
	pdev->pData = &hpcd_USB_OTG_FS;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <USBD_LL_Init+0x40>)
 8000e68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	// The STM32F703R8 FS peripheral has 1.28 KB (320 words) FIFO for TX + RX combined.
	HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 16);		// All OUT endpoints (shared)
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <USBD_LL_Init+0x40>)
 8000e70:	f002 fbbb 	bl	80035ea <HAL_PCDEx_SetRxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 288);	// IN endpoint 0 (bulk, data)
 8000e74:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <USBD_LL_Init+0x40>)
 8000e7c:	f002 fb6e 	bl	800355c <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 16);	// IN endpoint 1 (interrupt, control)
 8000e80:	2210      	movs	r2, #16
 8000e82:	2101      	movs	r1, #1
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <USBD_LL_Init+0x40>)
 8000e86:	f002 fb69 	bl	800355c <HAL_PCDEx_SetTxFiFo>

	return USBD_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000420 	.word	0x20000420

08000e98 <USBD_LL_Start>:
 * @brief  Starts the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef const hal_status = HAL_PCD_Start(pdev->pData);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fbba 	bl	8002620 <HAL_PCD_Start>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ffb8 	bl	8000e28 <USBD_Get_USB_Status>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <USBD_LL_OpenEP>:
 * @param  ep_mps: Endpoint Max Packet Size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4611      	mov	r1, r2
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	70fb      	strb	r3, [r7, #3]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70bb      	strb	r3, [r7, #2]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef const hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 ffc0 	bl	8002e6c <HAL_PCD_EP_Close>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
	pdev->ep_in[ep_addr & 0x7F].is_used = 0;
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	3324      	adds	r3, #36	; 0x24
 8000f04:	2200      	movs	r2, #0
 8000f06:	801a      	strh	r2, [r3, #0]
	return USBD_Get_USB_Status(hal_status);
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff8c 	bl	8000e28 <USBD_Get_USB_Status>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <USBD_LL_StallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef const hal_status = HAL_PCD_EP_SetStall(pdev->pData,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 f87a 	bl	800302a <HAL_PCD_EP_SetStall>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]
			ep_addr);
	return USBD_Get_USB_Status(hal_status);
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff73 	bl	8000e28 <USBD_Get_USB_Status>
 8000f42:	4603      	mov	r3, r0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <USBD_LL_ClearStallEP>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef const hal_status = HAL_PCD_EP_ClrStall(pdev->pData,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 f8c5 	bl	80030f2 <HAL_PCD_EP_ClrStall>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
			ep_addr);
	return USBD_Get_USB_Status(hal_status);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff5a 	bl	8000e28 <USBD_Get_USB_Status>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <USBD_LL_IsStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef const *hpcd = pdev->pData;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8000f90:	60fb      	str	r3, [r7, #12]
	return ep_addr & 0x80 ?
 8000f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
			hpcd->IN_ep[ep_addr & 0x7F].is_stall :
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	da0b      	bge.n	8000fb2 <USBD_LL_IsStallEP+0x34>
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	1a9b      	subs	r3, r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	333e      	adds	r3, #62	; 0x3e
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	e00b      	b.n	8000fca <USBD_LL_IsStallEP+0x4c>
			hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
			hpcd->IN_ep[ep_addr & 0x7F].is_stall :
 8000fb8:	68f9      	ldr	r1, [r7, #12]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8000fc8:	781b      	ldrb	r3, [r3, #0]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <USBD_LL_SetUSBAddress>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef const hal_status = HAL_PCD_SetAddress(pdev->pData,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8000fe8:	78fa      	ldrb	r2, [r7, #3]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 ff18 	bl	8002e22 <HAL_PCD_SetAddress>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]
			dev_addr);
	return USBD_Get_USB_Status(hal_status);
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff15 	bl	8000e28 <USBD_Get_USB_Status>
 8000ffe:	4603      	mov	r3, r0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <USBD_LL_Transmit>:
 * @param  size: Data size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	460b      	mov	r3, r1
 8001016:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef const hal_status = HAL_PCD_EP_Transmit(pdev->pData,
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800101e:	7af9      	ldrb	r1, [r7, #11]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	f001 ffb7 	bl	8002f96 <HAL_PCD_EP_Transmit>
 8001028:	4603      	mov	r3, r0
 800102a:	75fb      	strb	r3, [r7, #23]
			ep_addr, pbuf, size);
	return USBD_Get_USB_Status(hal_status);
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fefa 	bl	8000e28 <USBD_Get_USB_Status>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <USBD_LL_PrepareReceive>:
 * @param  size: Data size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	460b      	mov	r3, r1
 800104c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef const hal_status = HAL_PCD_EP_Receive(pdev->pData,
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001054:	7af9      	ldrb	r1, [r7, #11]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	f001 ff51 	bl	8002f00 <HAL_PCD_EP_Receive>
 800105e:	4603      	mov	r3, r0
 8001060:	75fb      	strb	r3, [r7, #23]
			ep_addr, pbuf, size);
	return USBD_Get_USB_Status(hal_status);
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fedf 	bl	8000e28 <USBD_Get_USB_Status>
 800106a:	4603      	mov	r3, r0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2212      	movs	r2, #18
 8001084:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8001086:	4b03      	ldr	r3, [pc, #12]	; (8001094 <USBD_Class_DeviceDescriptor+0x20>)
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20000020 	.word	0x20000020

08001098 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2204      	movs	r2, #4
 80010a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 80010aa:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000034 	.word	0x20000034

080010bc <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d105      	bne.n	80010da <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <USBD_Class_ProductStrDescriptor+0x34>)
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <USBD_Class_ProductStrDescriptor+0x38>)
 80010d4:	f006 fb21 	bl	800771a <USBD_GetString>
 80010d8:	e004      	b.n	80010e4 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	4904      	ldr	r1, [pc, #16]	; (80010f0 <USBD_Class_ProductStrDescriptor+0x34>)
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <USBD_Class_ProductStrDescriptor+0x3c>)
 80010e0:	f006 fb1b 	bl	800771a <USBD_GetString>
  }
  return USBD_StrDesc;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <USBD_Class_ProductStrDescriptor+0x34>)
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000944 	.word	0x20000944
 80010f4:	08008794 	.word	0x08008794
 80010f8:	080087ac 	.word	0x080087ac

080010fc <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	4904      	ldr	r1, [pc, #16]	; (800111c <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800110e:	f006 fb04 	bl	800771a <USBD_GetString>
  return USBD_StrDesc;
 8001112:	4b02      	ldr	r3, [pc, #8]	; (800111c <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000944 	.word	0x20000944
 8001120:	080087c4 	.word	0x080087c4

08001124 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	221a      	movs	r2, #26
 8001134:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8001136:	f000 f847 	bl	80011c8 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800113a:	4b02      	ldr	r3, [pc, #8]	; (8001144 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000038 	.word	0x20000038

08001148 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d105      	bne.n	8001166 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <USBD_Class_ConfigStrDescriptor+0x34>)
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <USBD_Class_ConfigStrDescriptor+0x38>)
 8001160:	f006 fadb 	bl	800771a <USBD_GetString>
 8001164:	e004      	b.n	8001170 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <USBD_Class_ConfigStrDescriptor+0x34>)
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <USBD_Class_ConfigStrDescriptor+0x3c>)
 800116c:	f006 fad5 	bl	800771a <USBD_GetString>
  }
  return USBD_StrDesc;
 8001170:	4b02      	ldr	r3, [pc, #8]	; (800117c <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000944 	.word	0x20000944
 8001180:	080087d0 	.word	0x080087d0
 8001184:	080087ec 	.word	0x080087ec

08001188 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d105      	bne.n	80011a6 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <USBD_Class_InterfaceStrDescriptor+0x34>)
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80011a0:	f006 fabb 	bl	800771a <USBD_GetString>
 80011a4:	e004      	b.n	80011b0 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	4904      	ldr	r1, [pc, #16]	; (80011bc <USBD_Class_InterfaceStrDescriptor+0x34>)
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <USBD_Class_InterfaceStrDescriptor+0x3c>)
 80011ac:	f006 fab5 	bl	800771a <USBD_GetString>
  }
  return USBD_StrDesc;
 80011b0:	4b02      	ldr	r3, [pc, #8]	; (80011bc <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000944 	.word	0x20000944
 80011c0:	08008808 	.word	0x08008808
 80011c4:	08008828 	.word	0x08008828

080011c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <Get_SerialNum+0x44>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <Get_SerialNum+0x48>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <Get_SerialNum+0x4c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 80011ee:	2208      	movs	r2, #8
 80011f0:	4909      	ldr	r1, [pc, #36]	; (8001218 <Get_SerialNum+0x50>)
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 f814 	bl	8001220 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 80011f8:	2204      	movs	r2, #4
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <Get_SerialNum+0x54>)
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f000 f80f 	bl	8001220 <IntToUnicode>
  }
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	1ff07a10 	.word	0x1ff07a10
 8001210:	1ff07a14 	.word	0x1ff07a14
 8001214:	1ff07a18 	.word	0x1ff07a18
 8001218:	2000003a 	.word	0x2000003a
 800121c:	2000004a 	.word	0x2000004a

08001220 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	4613      	mov	r3, r2
 800122c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8001232:	2300      	movs	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]
 8001236:	e025      	b.n	8001284 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	0f1b      	lsrs	r3, r3, #28
 800123c:	2b09      	cmp	r3, #9
 800123e:	d80a      	bhi.n	8001256 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	0f1b      	lsrs	r3, r3, #28
 8001244:	b2da      	uxtb	r2, r3
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	440b      	add	r3, r1
 800124e:	3230      	adds	r2, #48	; 0x30
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e009      	b.n	800126a <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0f1b      	lsrs	r3, r3, #28
 800125a:	b2da      	uxtb	r2, r3
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	440b      	add	r3, r1
 8001264:	3237      	adds	r2, #55	; 0x37
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	3301      	adds	r3, #1
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	4413      	add	r3, r2
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	3301      	adds	r3, #1
 8001282:	75fb      	strb	r3, [r7, #23]
 8001284:	7dfa      	ldrb	r2, [r7, #23]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	429a      	cmp	r2, r3
 800128a:	d3d5      	bcc.n	8001238 <IntToUnicode+0x18>
  }
}
 800128c:	bf00      	nop
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <USBD_TEMPLATE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_TEMPLATE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]

  return (uint8_t)USBD_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <USBD_TEMPLATE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_TEMPLATE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]

  return (uint8_t)USBD_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <USBD_TEMPLATE_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_TEMPLATE_GetCfgDesc(uint16_t *length)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_TEMPLATE_CfgDesc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2220      	movs	r2, #32
 80012d8:	801a      	strh	r2, [r3, #0]
  return USBD_TEMPLATE_CfgDesc;
 80012da:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <USBD_TEMPLATE_GetCfgDesc+0x1c>)
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	2000008c 	.word	0x2000008c

080012ec <USBD_TEMPLATE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_TEMPLATE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]

  return (uint8_t)USBD_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <USBD_TEMPLATE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_TEMPLATE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	70fb      	strb	r3, [r7, #3]

  return (uint8_t)USBD_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <USBD_TEMPLATE_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_TEMPLATE_GetDeviceQualifierDesc(uint16_t *length)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_TEMPLATE_DeviceQualifierDesc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	220a      	movs	r2, #10
 800132c:	801a      	strh	r2, [r3, #0]

  return USBD_TEMPLATE_DeviceQualifierDesc;
 800132e:	4b03      	ldr	r3, [pc, #12]	; (800133c <USBD_TEMPLATE_GetDeviceQualifierDesc+0x1c>)
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200000ac 	.word	0x200000ac

08001340 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	4619      	mov	r1, r3
 800136a:	f005 faa7 	bl	80068bc <USBD_LL_DataOutStage>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8001388:	78fa      	ldrb	r2, [r7, #3]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3348      	adds	r3, #72	; 0x48
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	4619      	mov	r1, r3
 800139e:	f005 faf0 	bl	8006982 <USBD_LL_DataInStage>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, hpcd->Setup);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f005 fa28 	bl	8006816 <USBD_LL_SetupStage>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80013dc:	4618      	mov	r0, r3
 80013de:	f005 fbe2 	bl	8006ba6 <USBD_LL_SOF>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80013f8:	2101      	movs	r1, #1
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 fb98 	bl	8006b30 <USBD_LL_SetSpeed>
  USBD_LL_Reset(hpcd->pData);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001406:	4618      	mov	r0, r3
 8001408:	f005 fb51 	bl	8006aae <USBD_LL_Reset>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fb94 	bl	8006b50 <USBD_LL_Suspend>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800143e:	4618      	mov	r0, r3
 8001440:	f005 fb9b 	bl	8006b7a <USBD_LL_Resume>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f005 fbc6 	bl	8006bf4 <USBD_LL_IsoOUTIncomplete>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fba7 	bl	8006bda <USBD_LL_IsoINIncomplete>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80014a2:	4618      	mov	r0, r3
 80014a4:	f005 fbb3 	bl	8006c0e <USBD_LL_DevConnected>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fbb0 	bl	8006c24 <USBD_LL_DevDisconnected>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014d2:	e003      	b.n	80014dc <LoopCopyDataInit>

080014d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014da:	3104      	adds	r1, #4

080014dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e4:	d3f6      	bcc.n	80014d4 <CopyDataInit>
  ldr  r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014e8:	e002      	b.n	80014f0 <LoopFillZerobss>

080014ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014ec:	f842 3b04 	str.w	r3, [r2], #4

080014f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f4:	d3f9      	bcc.n	80014ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f6:	f7ff fc81 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f006 f9d7 	bl	80078ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff f85f 	bl	80005c0 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001508:	08008948 	.word	0x08008948
  ldr  r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001510:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 8001514:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 8001518:	20000a4c 	.word	0x20000a4c

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>

0800151e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001522:	2003      	movs	r0, #3
 8001524:	f000 f94a 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001528:	2000      	movs	r0, #0
 800152a:	f000 f805 	bl	8001538 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800152e:	f7ff fa1f 	bl	8000970 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f965 	bl	8001826 <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f92d 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000000 	.word	0x20000000
 8001590:	200000bc 	.word	0x200000bc
 8001594:	200000b8 	.word	0x200000b8

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200000bc 	.word	0x200000bc
 80015bc:	20000a44 	.word	0x20000a44

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000a44 	.word	0x20000a44

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_Delay+0x40>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200000bc 	.word	0x200000bc

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <__NVIC_SetPriorityGrouping+0x40>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	4313      	orrs	r3, r2
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x40>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00
 8001660:	05fa0000 	.word	0x05fa0000

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff8e 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff29 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff3e 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff8e 	bl	8001710 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5d 	bl	80016bc <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff31 	bl	8001680 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff feb8 	bl	80015c0 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e099      	b.n	8001990 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800187c:	e00f      	b.n	800189e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800187e:	f7ff fe9f 	bl	80015c0 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b05      	cmp	r3, #5
 800188a:	d908      	bls.n	800189e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2220      	movs	r2, #32
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2203      	movs	r2, #3
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e078      	b.n	8001990 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e8      	bne.n	800187e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_DMA_Init+0x158>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d107      	bne.n	8001908 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	4313      	orrs	r3, r2
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f023 0307 	bic.w	r3, r3, #7
 800191e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2b04      	cmp	r3, #4
 8001930:	d117      	bne.n	8001962 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00e      	beq.n	8001962 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f9e9 	bl	8001d1c <DMA_CheckFifoParam>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2240      	movs	r2, #64	; 0x40
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800195e:	2301      	movs	r3, #1
 8001960:	e016      	b.n	8001990 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f9a0 	bl	8001cb0 <DMA_CalcBaseAndBitshift>
 8001970:	4603      	mov	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	223f      	movs	r2, #63	; 0x3f
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	e010803f 	.word	0xe010803f

0800199c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80019a8:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_DMA_IRQHandler+0x258>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a92      	ldr	r2, [pc, #584]	; (8001bf8 <HAL_DMA_IRQHandler+0x25c>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0a9b      	lsrs	r3, r3, #10
 80019b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2208      	movs	r2, #8
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	2208      	movs	r2, #8
 80019f6:	409a      	lsls	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f043 0202 	orr.w	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2204      	movs	r2, #4
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00b      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	2204      	movs	r2, #4
 8001a62:	409a      	lsls	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	f043 0204 	orr.w	r2, r3, #4
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	2210      	movs	r2, #16
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d043      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03c      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	2210      	movs	r2, #16
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d018      	beq.n	8001ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d108      	bne.n	8001acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d024      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
 8001aca:	e01f      	b.n	8001b0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01b      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
 8001adc:	e016      	b.n	8001b0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d107      	bne.n	8001afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0208 	bic.w	r2, r2, #8
 8001afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2220      	movs	r2, #32
 8001b12:	409a      	lsls	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 808e 	beq.w	8001c3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8086 	beq.w	8001c3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	2220      	movs	r2, #32
 8001b34:	409a      	lsls	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	d136      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0216 	bic.w	r2, r2, #22
 8001b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d103      	bne.n	8001b76 <HAL_DMA_IRQHandler+0x1da>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0208 	bic.w	r2, r2, #8
 8001b84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	223f      	movs	r2, #63	; 0x3f
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d07d      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
        }
        return;
 8001bb2:	e078      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d01c      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d108      	bne.n	8001be2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d030      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
 8001be0:	e02b      	b.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d027      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
 8001bf2:	e022      	b.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0210 	bic.w	r2, r2, #16
 8001c18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d032      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d022      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2205      	movs	r2, #5
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d307      	bcc.n	8001c82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f2      	bne.n	8001c66 <HAL_DMA_IRQHandler+0x2ca>
 8001c80:	e000      	b.n	8001c84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	4798      	blx	r3
 8001ca4:	e000      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ca6:	bf00      	nop
    }
  }
}
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop

08001cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	3b10      	subs	r3, #16
 8001cc0:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <DMA_CalcBaseAndBitshift+0x60>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <DMA_CalcBaseAndBitshift+0x64>)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d908      	bls.n	8001cf0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <DMA_CalcBaseAndBitshift+0x68>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	1d1a      	adds	r2, r3, #4
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	659a      	str	r2, [r3, #88]	; 0x58
 8001cee:	e006      	b.n	8001cfe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <DMA_CalcBaseAndBitshift+0x68>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	aaaaaaab 	.word	0xaaaaaaab
 8001d14:	08008898 	.word	0x08008898
 8001d18:	fffffc00 	.word	0xfffffc00

08001d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11f      	bne.n	8001d76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d855      	bhi.n	8001de8 <DMA_CheckFifoParam+0xcc>
 8001d3c:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <DMA_CheckFifoParam+0x28>)
 8001d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d42:	bf00      	nop
 8001d44:	08001d55 	.word	0x08001d55
 8001d48:	08001d67 	.word	0x08001d67
 8001d4c:	08001d55 	.word	0x08001d55
 8001d50:	08001de9 	.word	0x08001de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d045      	beq.n	8001dec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d64:	e042      	b.n	8001dec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d6e:	d13f      	bne.n	8001df0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d74:	e03c      	b.n	8001df0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d7e:	d121      	bne.n	8001dc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d836      	bhi.n	8001df4 <DMA_CheckFifoParam+0xd8>
 8001d86:	a201      	add	r2, pc, #4	; (adr r2, 8001d8c <DMA_CheckFifoParam+0x70>)
 8001d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8c:	08001d9d 	.word	0x08001d9d
 8001d90:	08001da3 	.word	0x08001da3
 8001d94:	08001d9d 	.word	0x08001d9d
 8001d98:	08001db5 	.word	0x08001db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001da0:	e02f      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d024      	beq.n	8001df8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db2:	e021      	b.n	8001df8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dbc:	d11e      	bne.n	8001dfc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dc2:	e01b      	b.n	8001dfc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d902      	bls.n	8001dd0 <DMA_CheckFifoParam+0xb4>
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d003      	beq.n	8001dd6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dce:	e018      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd4:	e015      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00e      	beq.n	8001e00 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      break;
 8001de6:	e00b      	b.n	8001e00 <DMA_CheckFifoParam+0xe4>
      break;
 8001de8:	bf00      	nop
 8001dea:	e00a      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
      break;
 8001dec:	bf00      	nop
 8001dee:	e008      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
      break;
 8001df0:	bf00      	nop
 8001df2:	e006      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
      break;
 8001df4:	bf00      	nop
 8001df6:	e004      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
      break;
 8001df8:	bf00      	nop
 8001dfa:	e002      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
      break;   
 8001dfc:	bf00      	nop
 8001dfe:	e000      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
      break;
 8001e00:	bf00      	nop
    }
  } 
  
  return status; 
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e169      	b.n	8002104 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e30:	2201      	movs	r2, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f040 8158 	bne.w	80020fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d00b      	beq.n	8001e6e <HAL_GPIO_Init+0x5e>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e62:	2b11      	cmp	r3, #17
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x100>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b12      	cmp	r3, #18
 8001f0e:	d123      	bne.n	8001f58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	08da      	lsrs	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3208      	adds	r2, #8
 8001f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	220f      	movs	r2, #15
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	08da      	lsrs	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3208      	adds	r2, #8
 8001f52:	69b9      	ldr	r1, [r7, #24]
 8001f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0203 	and.w	r2, r3, #3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80b2 	beq.w	80020fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <HAL_GPIO_Init+0x308>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a5e      	ldr	r2, [pc, #376]	; (8002118 <HAL_GPIO_Init+0x308>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b5c      	ldr	r3, [pc, #368]	; (8002118 <HAL_GPIO_Init+0x308>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fb2:	4a5a      	ldr	r2, [pc, #360]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_GPIO_Init+0x310>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02b      	beq.n	8002036 <HAL_GPIO_Init+0x226>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_GPIO_Init+0x314>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d025      	beq.n	8002032 <HAL_GPIO_Init+0x222>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_GPIO_Init+0x318>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <HAL_GPIO_Init+0x21e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_GPIO_Init+0x31c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d019      	beq.n	800202a <HAL_GPIO_Init+0x21a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4d      	ldr	r2, [pc, #308]	; (8002130 <HAL_GPIO_Init+0x320>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x216>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_GPIO_Init+0x324>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_Init+0x212>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <HAL_GPIO_Init+0x328>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x20e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4a      	ldr	r2, [pc, #296]	; (800213c <HAL_GPIO_Init+0x32c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_GPIO_Init+0x20a>
 8002016:	2307      	movs	r3, #7
 8002018:	e00e      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800201a:	2308      	movs	r3, #8
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800201e:	2306      	movs	r3, #6
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002048:	4934      	ldr	r1, [pc, #208]	; (800211c <HAL_GPIO_Init+0x30c>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_GPIO_Init+0x330>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800207a:	4a31      	ldr	r2, [pc, #196]	; (8002140 <HAL_GPIO_Init+0x330>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <HAL_GPIO_Init+0x330>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <HAL_GPIO_Init+0x330>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_GPIO_Init+0x330>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_GPIO_Init+0x330>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_GPIO_Init+0x330>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f8:	4a11      	ldr	r2, [pc, #68]	; (8002140 <HAL_GPIO_Init+0x330>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f ae92 	bls.w	8001e30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	3724      	adds	r7, #36	; 0x24
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40023800 	.word	0x40023800
 800211c:	40013800 	.word	0x40013800
 8002120:	40020000 	.word	0x40020000
 8002124:	40020400 	.word	0x40020400
 8002128:	40020800 	.word	0x40020800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40021000 	.word	0x40021000
 8002134:	40021400 	.word	0x40021400
 8002138:	40021800 	.word	0x40021800
 800213c:	40021c00 	.word	0x40021c00
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0d2      	b.n	8002330 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fc0a 	bl	80009b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	69d9      	ldr	r1, [r3, #28]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b60      	ldr	r3, [pc, #384]	; (8002338 <HAL_I2S_Init+0x1c0>)
 80021b8:	400b      	ands	r3, r1
 80021ba:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2202      	movs	r2, #2
 80021c2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d067      	beq.n	800229c <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80021d4:	2310      	movs	r3, #16
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e001      	b.n	80021de <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80021da:	2320      	movs	r3, #32
 80021dc:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d802      	bhi.n	80021ec <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80021f4:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_I2S_Init+0x1c4>)
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e003      	b.n	8002202 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8a2 	bl	8002344 <I2S_GetClockFreq>
 8002200:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800220a:	d125      	bne.n	8002258 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d010      	beq.n	8002236 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	fbb2 f2f3 	udiv	r2, r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	3305      	adds	r3, #5
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e01f      	b.n	8002276 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	461a      	mov	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	3305      	adds	r3, #5
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	e00e      	b.n	8002276 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	461a      	mov	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	3305      	adds	r3, #5
 8002274:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_I2S_Init+0x1c8>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	08db      	lsrs	r3, r3, #3
 8002280:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	e003      	b.n	80022a4 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800229c:	2302      	movs	r3, #2
 800229e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d902      	bls.n	80022b0 <HAL_I2S_Init+0x138>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	2bff      	cmp	r3, #255	; 0xff
 80022ae:	d907      	bls.n	80022c0 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e037      	b.n	8002330 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	ea42 0103 	orr.w	r1, r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69da      	ldr	r2, [r3, #28]
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_I2S_Init+0x1c0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6851      	ldr	r1, [r2, #4]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	4311      	orrs	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68d2      	ldr	r2, [r2, #12]
 80022ec:	4311      	orrs	r1, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6992      	ldr	r2, [r2, #24]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022fe:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b30      	cmp	r3, #48	; 0x30
 8002306:	d003      	beq.n	8002310 <HAL_I2S_Init+0x198>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2bb0      	cmp	r3, #176	; 0xb0
 800230e:	d107      	bne.n	8002320 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800231e:	61da      	str	r2, [r3, #28]
  }
#endif

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	fffff040 	.word	0xfffff040
 800233c:	00bb8000 	.word	0x00bb8000
 8002340:	cccccccd 	.word	0xcccccccd

08002344 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d02d      	beq.n	80023b0 <I2S_GetClockFreq+0x6c>
 8002354:	2b02      	cmp	r3, #2
 8002356:	d12e      	bne.n	80023b6 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002358:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <I2S_GetClockFreq+0x88>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <I2S_GetClockFreq+0x88>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <I2S_GetClockFreq+0x8c>)
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e007      	b.n	8002386 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <I2S_GetClockFreq+0x88>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <I2S_GetClockFreq+0x8c>)
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <I2S_GetClockFreq+0x88>)
 8002388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238c:	0f1b      	lsrs	r3, r3, #28
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <I2S_GetClockFreq+0x88>)
 8002396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	fb02 f203 	mul.w	r2, r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	613b      	str	r3, [r7, #16]

      break;
 80023ae:	e005      	b.n	80023bc <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <I2S_GetClockFreq+0x90>)
 80023b2:	613b      	str	r3, [r7, #16]
      break;
 80023b4:	e002      	b.n	80023bc <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
      break;
 80023ba:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80023bc:	693b      	ldr	r3, [r7, #16]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	00f42400 	.word	0x00f42400
 80023d4:	00bb8000 	.word	0x00bb8000

080023d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	b08f      	sub	sp, #60	; 0x3c
 80023dc:	af0a      	add	r7, sp, #40	; 0x28
 80023de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e116      	b.n	8002618 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d106      	bne.n	800240a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7fe fbaf 	bl	8000b68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2203      	movs	r2, #3
 800240e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f002 ff70 	bl	800530e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	687e      	ldr	r6, [r7, #4]
 8002436:	466d      	mov	r5, sp
 8002438:	f106 0410 	add.w	r4, r6, #16
 800243c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800243e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002444:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002448:	e885 0003 	stmia.w	r5, {r0, r1}
 800244c:	1d33      	adds	r3, r6, #4
 800244e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	f002 fe13 	bl	800507c <USB_CoreInit>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0d7      	b.n	8002618 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f002 ff5e 	bl	8005330 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e04a      	b.n	8002510 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	333d      	adds	r3, #61	; 0x3d
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	333c      	adds	r3, #60	; 0x3c
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	b298      	uxth	r0, r3
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3342      	adds	r3, #66	; 0x42
 80024b6:	4602      	mov	r2, r0
 80024b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	333f      	adds	r3, #63	; 0x3f
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3344      	adds	r3, #68	; 0x44
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3348      	adds	r3, #72	; 0x48
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3350      	adds	r3, #80	; 0x50
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	3301      	adds	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	429a      	cmp	r2, r3
 8002518:	d3af      	bcc.n	800247a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e044      	b.n	80025aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	3301      	adds	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d3b5      	bcc.n	8002520 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	687e      	ldr	r6, [r7, #4]
 80025bc:	466d      	mov	r5, sp
 80025be:	f106 0410 	add.w	r4, r6, #16
 80025c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80025d2:	1d33      	adds	r3, r6, #4
 80025d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d6:	6838      	ldr	r0, [r7, #0]
 80025d8:	f002 fed4 	bl	8005384 <USB_DevInit>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e014      	b.n	8002618 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	2b01      	cmp	r3, #1
 8002604:	d102      	bne.n	800260c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f001 f800 	bl	800360c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f003 fe9b 	bl	800634c <USB_DevDisconnect>

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002620 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_PCD_Start+0x16>
 8002632:	2302      	movs	r3, #2
 8002634:	e012      	b.n	800265c <HAL_PCD_Start+0x3c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fe6a 	bl	800631c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fe4d 	bl	80052ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b08d      	sub	sp, #52	; 0x34
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f003 ff11 	bl	80064a2 <USB_GetMode>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 83ca 	bne.w	8002e1c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fe75 	bl	800637c <USB_ReadInterrupts>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 83c0 	beq.w	8002e1a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fe6c 	bl	800637c <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f002 0202 	and.w	r2, r2, #2
 80026bc:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fe5a 	bl	800637c <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d161      	bne.n	8002796 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0210 	bic.w	r2, r2, #16
 80026e0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f003 020f 	and.w	r2, r3, #15
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	0c5b      	lsrs	r3, r3, #17
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	2b02      	cmp	r3, #2
 800270c:	d124      	bne.n	8002758 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d035      	beq.n	8002786 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002724:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	6a38      	ldr	r0, [r7, #32]
 800272e:	f003 fcd2 	bl	80060d6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800273e:	441a      	add	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002750:	441a      	add	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	619a      	str	r2, [r3, #24]
 8002756:	e016      	b.n	8002786 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	0c5b      	lsrs	r3, r3, #17
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	2b06      	cmp	r3, #6
 8002762:	d110      	bne.n	8002786 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800276a:	2208      	movs	r2, #8
 800276c:	4619      	mov	r1, r3
 800276e:	6a38      	ldr	r0, [r7, #32]
 8002770:	f003 fcb1 	bl	80060d6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002780:	441a      	add	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0210 	orr.w	r2, r2, #16
 8002794:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fdee 	bl	800637c <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027aa:	d16e      	bne.n	800288a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 fdf4 	bl	80063a2 <USB_ReadDevAllOutEpInterrupt>
 80027ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027bc:	e062      	b.n	8002884 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d057      	beq.n	8002878 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 fe19 	bl	800640a <USB_ReadDevOutEPInterrupt>
 80027d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f0:	461a      	mov	r2, r3
 80027f2:	2301      	movs	r3, #1
 80027f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fd5d 	bl	80032b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002814:	461a      	mov	r2, r3
 8002816:	2308      	movs	r3, #8
 8002818:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800281a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fe57 	bl	80034d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002838:	461a      	mov	r2, r3
 800283a:	2310      	movs	r3, #16
 800283c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	2320      	movs	r3, #32
 8002858:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002870:	461a      	mov	r2, r3
 8002872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002876:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	3301      	adds	r3, #1
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d199      	bne.n	80027be <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 fd74 	bl	800637c <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800289e:	f040 80c0 	bne.w	8002a22 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 fd95 	bl	80063d6 <USB_ReadDevAllInEpInterrupt>
 80028ac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028b2:	e0b2      	b.n	8002a1a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80a7 	beq.w	8002a0e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fdbb 	bl	8006446 <USB_ReadDevInEPInterrupt>
 80028d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d057      	beq.n	800298c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	2201      	movs	r2, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69f9      	ldr	r1, [r7, #28]
 80028f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028fc:	4013      	ands	r3, r2
 80028fe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290c:	461a      	mov	r2, r3
 800290e:	2301      	movs	r3, #1
 8002910:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d132      	bne.n	8002980 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3348      	adds	r3, #72	; 0x48
 800292a:	6819      	ldr	r1, [r3, #0]
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4403      	add	r3, r0
 800293a:	3344      	adds	r3, #68	; 0x44
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4419      	add	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4403      	add	r3, r0
 800294e:	3348      	adds	r3, #72	; 0x48
 8002950:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d113      	bne.n	8002980 <HAL_PCD_IRQHandler+0x31c>
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	3350      	adds	r3, #80	; 0x50
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d108      	bne.n	8002980 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002978:	461a      	mov	r2, r3
 800297a:	2101      	movs	r1, #1
 800297c:	f003 fdc4 	bl	8006508 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fcf5 	bl	8001376 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a2:	461a      	mov	r2, r3
 80029a4:	2308      	movs	r3, #8
 80029a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029be:	461a      	mov	r2, r3
 80029c0:	2310      	movs	r3, #16
 80029c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029da:	461a      	mov	r2, r3
 80029dc:	2340      	movs	r3, #64	; 0x40
 80029de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f6:	461a      	mov	r2, r3
 80029f8:	2302      	movs	r3, #2
 80029fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fbc8 	bl	800319e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	3301      	adds	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f af49 	bne.w	80028b4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fca8 	bl	800637c <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a36:	d122      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d108      	bne.n	8002a68 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a5e:	2100      	movs	r1, #0
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fdf7 	bl	8003654 <HAL_PCDEx_LPM_Callback>
 8002a66:	e002      	b.n	8002a6e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe fce1 	bl	8001430 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 fc7a 	bl	800637c <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a92:	d112      	bne.n	8002aba <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7fe fcb5 	bl	8001414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ab8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fc5c 	bl	800637c <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ace:	d121      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002ade:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d111      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	f003 020f 	and.w	r2, r3, #15
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b04:	2101      	movs	r1, #1
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fda4 	bl	8003654 <HAL_PCDEx_LPM_Callback>
 8002b0c:	e002      	b.n	8002b14 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fc80 	bl	8001414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fc2f 	bl	800637c <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b28:	f040 80c7 	bne.w	8002cba <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2110      	movs	r1, #16
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fd8a 	bl	8005660 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b50:	e056      	b.n	8002c00 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b76:	0151      	lsls	r1, r2, #5
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	440a      	add	r2, r1
 8002b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b84:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b96:	0151      	lsls	r1, r2, #5
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	440a      	add	r2, r1
 8002b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ba0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ba4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bb8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bca:	0151      	lsls	r1, r2, #5
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	440a      	add	r2, r1
 8002bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bea:	0151      	lsls	r1, r2, #5
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	440a      	add	r2, r1
 8002bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bf8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3a3      	bcc.n	8002b52 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c18:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c36:	f043 030b 	orr.w	r3, r3, #11
 8002c3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c4c:	f043 030b 	orr.w	r3, r3, #11
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	e015      	b.n	8002c80 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c62:	4619      	mov	r1, r3
 8002c64:	f242 032b 	movw	r3, #8235	; 0x202b
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c7a:	f043 030b 	orr.w	r3, r3, #11
 8002c7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f003 fc2f 	bl	8006508 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 fb5c 	bl	800637c <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cce:	d124      	bne.n	8002d1a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fbf3 	bl	80064c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 fd1f 	bl	8005722 <USB_GetDevSpeed>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681c      	ldr	r4, [r3, #0]
 8002cf0:	f001 f972 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f002 fa52 	bl	80051a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7fe fb70 	bl	80013ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fb2c 	bl	800637c <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d10a      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe fb4d 	bl	80013ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f002 0208 	and.w	r2, r2, #8
 8002d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f003 fb17 	bl	800637c <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d58:	d10f      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fe fb83 	bl	8001470 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fafc 	bl	800637c <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d8e:	d10f      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fb56 	bl	800144c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fae1 	bl	800637c <USB_ReadInterrupts>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d10a      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe fb64 	bl	8001494 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 facb 	bl	800637c <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d115      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fb54 	bl	80014b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	e000      	b.n	8002e1c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002e1a:	bf00      	nop
    }
  }
}
 8002e1c:	3734      	adds	r7, #52	; 0x34
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_PCD_SetAddress+0x1a>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e013      	b.n	8002e64 <HAL_PCD_SetAddress+0x42>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 fa3b 	bl	80062d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0f      	bge.n	8002ea0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3338      	adds	r3, #56	; 0x38
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	705a      	strb	r2, [r3, #1]
 8002e9e:	e00f      	b.n	8002ec0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_PCD_EP_Close+0x6e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e00e      	b.n	8002ef8 <HAL_PCD_EP_Close+0x8c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fc3f 	bl	800576c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	f003 020f 	and.w	r2, r3, #15
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f42:	7afb      	ldrb	r3, [r7, #11]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	6979      	ldr	r1, [r7, #20]
 8002f74:	f002 ff22 	bl	8005dbc <USB_EP0StartXfer>
 8002f78:	e008      	b.n	8002f8c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	f002 fccc 	bl	8005924 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa6:	7afb      	ldrb	r3, [r7, #11]
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	3338      	adds	r3, #56	; 0x38
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d102      	bne.n	8002ff0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff0:	7afb      	ldrb	r3, [r7, #11]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	f002 fed8 	bl	8005dbc <USB_EP0StartXfer>
 800300c:	e008      	b.n	8003020 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	6979      	ldr	r1, [r7, #20]
 800301c:	f002 fc82 	bl	8005924 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d901      	bls.n	8003048 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e050      	b.n	80030ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800304c:	2b00      	cmp	r3, #0
 800304e:	da0f      	bge.n	8003070 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	f003 020f 	and.w	r2, r3, #15
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	3338      	adds	r3, #56	; 0x38
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	3304      	adds	r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	705a      	strb	r2, [r3, #1]
 800306e:	e00d      	b.n	800308c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_PCD_EP_SetStall+0x82>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e01e      	b.n	80030ea <HAL_PCD_EP_SetStall+0xc0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68f9      	ldr	r1, [r7, #12]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 f834 	bl	8006128 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	b2d9      	uxtb	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030da:	461a      	mov	r2, r3
 80030dc:	f003 fa14 	bl	8006508 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d901      	bls.n	8003110 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e042      	b.n	8003196 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003114:	2b00      	cmp	r3, #0
 8003116:	da0f      	bge.n	8003138 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	3338      	adds	r3, #56	; 0x38
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	3304      	adds	r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	705a      	strb	r2, [r3, #1]
 8003136:	e00f      	b.n	8003158 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 020f 	and.w	r2, r3, #15
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	3304      	adds	r3, #4
 8003150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_PCD_EP_ClrStall+0x86>
 8003174:	2302      	movs	r3, #2
 8003176:	e00e      	b.n	8003196 <HAL_PCD_EP_ClrStall+0xa4>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	4618      	mov	r0, r3
 8003188:	f003 f83c 	bl	8006204 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b08a      	sub	sp, #40	; 0x28
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	3338      	adds	r3, #56	; 0x38
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d901      	bls.n	80031d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06c      	b.n	80032b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d902      	bls.n	80031f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3303      	adds	r3, #3
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031fa:	e02b      	b.n	8003254 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	429a      	cmp	r2, r3
 8003210:	d902      	bls.n	8003218 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3303      	adds	r3, #3
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68d9      	ldr	r1, [r3, #12]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003230:	b2db      	uxtb	r3, r3
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4603      	mov	r3, r0
 8003236:	6978      	ldr	r0, [r7, #20]
 8003238:	f002 ff18 	bl	800606c <USB_WritePacket>

    ep->xfer_buff  += len;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	441a      	add	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	441a      	add	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	b29b      	uxth	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	429a      	cmp	r2, r3
 8003268:	d809      	bhi.n	800327e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003272:	429a      	cmp	r2, r3
 8003274:	d203      	bcs.n	800327e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1be      	bne.n	80031fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	429a      	cmp	r2, r3
 8003288:	d811      	bhi.n	80032ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	2201      	movs	r2, #1
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	6939      	ldr	r1, [r7, #16]
 80032a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032aa:	4013      	ands	r3, r2
 80032ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	333c      	adds	r3, #60	; 0x3c
 80032d0:	3304      	adds	r3, #4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	f040 80a0 	bne.w	8003430 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d015      	beq.n	8003326 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <PCD_EP_OutXfrComplete_int+0x210>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	f240 80dd 	bls.w	80034be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80d7 	beq.w	80034be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003322:	6093      	str	r3, [r2, #8]
 8003324:	e0cb      	b.n	80034be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d009      	beq.n	8003344 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333c:	461a      	mov	r2, r3
 800333e:	2320      	movs	r3, #32
 8003340:	6093      	str	r3, [r2, #8]
 8003342:	e0bc      	b.n	80034be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 80b7 	bne.w	80034be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a5d      	ldr	r2, [pc, #372]	; (80034c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d90f      	bls.n	8003378 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336e:	461a      	mov	r2, r3
 8003370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003374:	6093      	str	r3, [r2, #8]
 8003376:	e0a2      	b.n	80034be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800338a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	0159      	lsls	r1, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	440b      	add	r3, r1
 8003394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800339e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4403      	add	r3, r0
 80033ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033b2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4403      	add	r3, r0
 80033d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4419      	add	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4403      	add	r3, r0
 80033ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033f0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d114      	bne.n	8003422 <PCD_EP_OutXfrComplete_int+0x16a>
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800341a:	461a      	mov	r2, r3
 800341c:	2101      	movs	r1, #1
 800341e:	f003 f873 	bl	8006508 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd ff89 	bl	8001340 <HAL_PCD_DataOutStageCallback>
 800342e:	e046      	b.n	80034be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a26      	ldr	r2, [pc, #152]	; (80034cc <PCD_EP_OutXfrComplete_int+0x214>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d124      	bne.n	8003482 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	461a      	mov	r2, r3
 8003450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003454:	6093      	str	r3, [r2, #8]
 8003456:	e032      	b.n	80034be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	461a      	mov	r2, r3
 8003470:	2320      	movs	r3, #32
 8003472:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd ff60 	bl	8001340 <HAL_PCD_DataOutStageCallback>
 8003480:	e01d      	b.n	80034be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d114      	bne.n	80034b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d108      	bne.n	80034b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034aa:	461a      	mov	r2, r3
 80034ac:	2100      	movs	r1, #0
 80034ae:	f003 f82b 	bl	8006508 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7fd ff41 	bl	8001340 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	4f54300a 	.word	0x4f54300a
 80034cc:	4f54310a 	.word	0x4f54310a

080034d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	333c      	adds	r3, #60	; 0x3c
 80034e8:	3304      	adds	r3, #4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a15      	ldr	r2, [pc, #84]	; (8003558 <PCD_EP_OutSetupPacket_int+0x88>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d90e      	bls.n	8003524 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351c:	461a      	mov	r2, r3
 800351e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003522:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7fd ff40 	bl	80013aa <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <PCD_EP_OutSetupPacket_int+0x88>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d90c      	bls.n	800354c <PCD_EP_OutSetupPacket_int+0x7c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d108      	bne.n	800354c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003544:	461a      	mov	r2, r3
 8003546:	2101      	movs	r1, #1
 8003548:	f002 ffde 	bl	8006508 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	4f54300a 	.word	0x4f54300a

0800355c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
 8003568:	4613      	mov	r3, r2
 800356a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d107      	bne.n	800358a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800357a:	883b      	ldrh	r3, [r7, #0]
 800357c:	0419      	lsls	r1, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	430a      	orrs	r2, r1
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
 8003588:	e028      	b.n	80035dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4413      	add	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e00d      	b.n	80035ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	3340      	adds	r3, #64	; 0x40
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4413      	add	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	3301      	adds	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	3b01      	subs	r3, #1
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d3ec      	bcc.n	800359e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035c4:	883b      	ldrh	r3, [r7, #0]
 80035c6:	0418      	lsls	r0, r3, #16
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	4302      	orrs	r2, r0
 80035d4:	3340      	adds	r3, #64	; 0x40
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800363a:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_PCDEx_ActivateLPM+0x44>)
 800363c:	4313      	orrs	r3, r2
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	10000003 	.word	0x10000003

08003654 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b23      	ldr	r3, [pc, #140]	; (8003704 <HAL_PWREx_EnableOverDrive+0x98>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	4a22      	ldr	r2, [pc, #136]	; (8003704 <HAL_PWREx_EnableOverDrive+0x98>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	6413      	str	r3, [r2, #64]	; 0x40
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_PWREx_EnableOverDrive+0x98>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800369a:	f7fd ff91 	bl	80015c0 <HAL_GetTick>
 800369e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036a0:	e009      	b.n	80036b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036a2:	f7fd ff8d 	bl	80015c0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036b0:	d901      	bls.n	80036b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e022      	b.n	80036fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d1ee      	bne.n	80036a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0f      	ldr	r2, [pc, #60]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d0:	f7fd ff76 	bl	80015c0 <HAL_GetTick>
 80036d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036d6:	e009      	b.n	80036ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036d8:	f7fd ff72 	bl	80015c0 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036e6:	d901      	bls.n	80036ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e007      	b.n	80036fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f8:	d1ee      	bne.n	80036d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40023800 	.word	0x40023800
 8003708:	40007000 	.word	0x40007000

0800370c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e291      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8087 	beq.w	800383e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003730:	4b96      	ldr	r3, [pc, #600]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b04      	cmp	r3, #4
 800373a:	d00c      	beq.n	8003756 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373c:	4b93      	ldr	r3, [pc, #588]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d112      	bne.n	800376e <HAL_RCC_OscConfig+0x62>
 8003748:	4b90      	ldr	r3, [pc, #576]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003754:	d10b      	bne.n	800376e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003756:	4b8d      	ldr	r3, [pc, #564]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d06c      	beq.n	800383c <HAL_RCC_OscConfig+0x130>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d168      	bne.n	800383c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e26b      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x7a>
 8003778:	4b84      	ldr	r3, [pc, #528]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a83      	ldr	r2, [pc, #524]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	e02e      	b.n	80037e4 <HAL_RCC_OscConfig+0xd8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x9c>
 800378e:	4b7f      	ldr	r3, [pc, #508]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7e      	ldr	r2, [pc, #504]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b7c      	ldr	r3, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7b      	ldr	r2, [pc, #492]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e01d      	b.n	80037e4 <HAL_RCC_OscConfig+0xd8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0xc0>
 80037b2:	4b76      	ldr	r3, [pc, #472]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a75      	ldr	r2, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a72      	ldr	r2, [pc, #456]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0xd8>
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6e      	ldr	r2, [pc, #440]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b6c      	ldr	r3, [pc, #432]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6b      	ldr	r2, [pc, #428]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fd fee8 	bl	80015c0 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fd fee4 	bl	80015c0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e21f      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b61      	ldr	r3, [pc, #388]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0xe8>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fed4 	bl	80015c0 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd fed0 	bl	80015c0 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e20b      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x110>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d069      	beq.n	800391e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800384a:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b4d      	ldr	r3, [pc, #308]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b08      	cmp	r3, #8
 8003860:	d11c      	bne.n	800389c <HAL_RCC_OscConfig+0x190>
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_RCC_OscConfig+0x17a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1df      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	493d      	ldr	r1, [pc, #244]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	e040      	b.n	800391e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d023      	beq.n	80038ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a4:	4b39      	ldr	r3, [pc, #228]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a38      	ldr	r2, [pc, #224]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fe86 	bl	80015c0 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b8:	f7fd fe82 	bl	80015c0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e1bd      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b30      	ldr	r3, [pc, #192]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	4b2d      	ldr	r3, [pc, #180]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4929      	ldr	r1, [pc, #164]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
 80038ea:	e018      	b.n	800391e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <HAL_RCC_OscConfig+0x280>)
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fd fe62 	bl	80015c0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003900:	f7fd fe5e 	bl	80015c0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e199      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d038      	beq.n	800399c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d019      	beq.n	8003966 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fd fe3f 	bl	80015c0 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003946:	f7fd fe3b 	bl	80015c0 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e176      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x23a>
 8003964:	e01a      	b.n	800399c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_OscConfig+0x280>)
 8003968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <HAL_RCC_OscConfig+0x280>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fd fe25 	bl	80015c0 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397a:	f7fd fe21 	bl	80015c0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d903      	bls.n	8003990 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e15c      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
 800398c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	4b91      	ldr	r3, [pc, #580]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ee      	bne.n	800397a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80a4 	beq.w	8003af2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039aa:	4b8b      	ldr	r3, [pc, #556]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10d      	bne.n	80039d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b6:	4b88      	ldr	r3, [pc, #544]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a87      	ldr	r2, [pc, #540]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
 80039c2:	4b85      	ldr	r3, [pc, #532]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d2:	4b82      	ldr	r3, [pc, #520]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d118      	bne.n	8003a10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039de:	4b7f      	ldr	r3, [pc, #508]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a7e      	ldr	r2, [pc, #504]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7fd fde9 	bl	80015c0 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fd fde5 	bl	80015c0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b64      	cmp	r3, #100	; 0x64
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e120      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a04:	4b75      	ldr	r3, [pc, #468]	; (8003bdc <HAL_RCC_OscConfig+0x4d0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x31a>
 8003a18:	4b6f      	ldr	r3, [pc, #444]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a6e      	ldr	r2, [pc, #440]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	e02d      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x33c>
 8003a2e:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a69      	ldr	r2, [pc, #420]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3a:	4b67      	ldr	r3, [pc, #412]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a66      	ldr	r2, [pc, #408]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a40:	f023 0304 	bic.w	r3, r3, #4
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	e01c      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d10c      	bne.n	8003a6a <HAL_RCC_OscConfig+0x35e>
 8003a50:	4b61      	ldr	r3, [pc, #388]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a60      	ldr	r2, [pc, #384]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a56:	f043 0304 	orr.w	r3, r3, #4
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	4b5e      	ldr	r3, [pc, #376]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a5d      	ldr	r2, [pc, #372]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
 8003a68:	e00b      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
 8003a6a:	4b5b      	ldr	r3, [pc, #364]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	4a5a      	ldr	r2, [pc, #360]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6713      	str	r3, [r2, #112]	; 0x70
 8003a76:	4b58      	ldr	r3, [pc, #352]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	4a57      	ldr	r2, [pc, #348]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d015      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fd fd99 	bl	80015c0 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fd fd95 	bl	80015c0 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0ce      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa8:	4b4b      	ldr	r3, [pc, #300]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ee      	beq.n	8003a92 <HAL_RCC_OscConfig+0x386>
 8003ab4:	e014      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fd83 	bl	80015c0 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fd fd7f 	bl	80015c0 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0b8      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad4:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ee      	bne.n	8003abe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d105      	bne.n	8003af2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae6:	4b3c      	ldr	r3, [pc, #240]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	4a3b      	ldr	r2, [pc, #236]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80a4 	beq.w	8003c44 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003afc:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d06b      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d149      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b10:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fd50 	bl	80015c0 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fd fd4c 	bl	80015c0 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e087      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	4313      	orrs	r3, r2
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003b6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b6e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fd20 	bl	80015c0 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fd fd1c 	bl	80015c0 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e057      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x478>
 8003ba2:	e04f      	b.n	8003c44 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0b      	ldr	r2, [pc, #44]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd fd06 	bl	80015c0 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fd fd02 	bl	80015c0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e03d      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_OscConfig+0x4cc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4ac>
 8003bd6:	e035      	b.n	8003c44 <HAL_RCC_OscConfig+0x538>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x544>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d121      	bne.n	8003c40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11a      	bne.n	8003c40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0d0      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d910      	bls.n	8003c9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b67      	ldr	r3, [pc, #412]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 020f 	bic.w	r2, r3, #15
 8003c82:	4965      	ldr	r1, [pc, #404]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0b8      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb4:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a58      	ldr	r2, [pc, #352]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ccc:	4b53      	ldr	r3, [pc, #332]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a52      	ldr	r2, [pc, #328]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b50      	ldr	r3, [pc, #320]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	494d      	ldr	r1, [pc, #308]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d040      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b47      	ldr	r3, [pc, #284]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d115      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e073      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06b      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4936      	ldr	r1, [pc, #216]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d48:	f7fd fc3a 	bl	80015c0 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fd fc36 	bl	80015c0 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e053      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d210      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 020f 	bic.w	r2, r3, #15
 8003d8e:	4922      	ldr	r1, [pc, #136]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e032      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4916      	ldr	r1, [pc, #88]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	490e      	ldr	r1, [pc, #56]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003de6:	f000 f821 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003dea:	4601      	mov	r1, r0
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <HAL_RCC_ClockConfig+0x1cc>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1d0>)
 8003e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x1d4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fd fb96 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023c00 	.word	0x40023c00
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	08008880 	.word	0x08008880
 8003e24:	20000000 	.word	0x20000000
 8003e28:	200000b8 	.word	0x200000b8

08003e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e42:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d007      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x32>
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d008      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x38>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 80b4 	bne.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4b5e      	ldr	r3, [pc, #376]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e5a:	60bb      	str	r3, [r7, #8]
      break;
 8003e5c:	e0b3      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5e:	4b5d      	ldr	r3, [pc, #372]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e60:	60bb      	str	r3, [r7, #8]
      break;
 8003e62:	e0b0      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e64:	4b5a      	ldr	r3, [pc, #360]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e6c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e6e:	4b58      	ldr	r3, [pc, #352]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d04a      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7a:	4b55      	ldr	r3, [pc, #340]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	099b      	lsrs	r3, r3, #6
 8003e80:	f04f 0400 	mov.w	r4, #0
 8003e84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	ea03 0501 	and.w	r5, r3, r1
 8003e90:	ea04 0602 	and.w	r6, r4, r2
 8003e94:	4629      	mov	r1, r5
 8003e96:	4632      	mov	r2, r6
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	f04f 0400 	mov.w	r4, #0
 8003ea0:	0154      	lsls	r4, r2, #5
 8003ea2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ea6:	014b      	lsls	r3, r1, #5
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4622      	mov	r2, r4
 8003eac:	1b49      	subs	r1, r1, r5
 8003eae:	eb62 0206 	sbc.w	r2, r2, r6
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	f04f 0400 	mov.w	r4, #0
 8003eba:	0194      	lsls	r4, r2, #6
 8003ebc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ec0:	018b      	lsls	r3, r1, #6
 8003ec2:	1a5b      	subs	r3, r3, r1
 8003ec4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ec8:	f04f 0100 	mov.w	r1, #0
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	00e2      	lsls	r2, r4, #3
 8003ed2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ed6:	00d9      	lsls	r1, r3, #3
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4614      	mov	r4, r2
 8003edc:	195b      	adds	r3, r3, r5
 8003ede:	eb44 0406 	adc.w	r4, r4, r6
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	02a2      	lsls	r2, r4, #10
 8003eec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ef0:	0299      	lsls	r1, r3, #10
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	4621      	mov	r1, r4
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f04f 0400 	mov.w	r4, #0
 8003f00:	461a      	mov	r2, r3
 8003f02:	4623      	mov	r3, r4
 8003f04:	f7fc f9dc 	bl	80002c0 <__aeabi_uldivmod>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e049      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f10:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	f04f 0400 	mov.w	r4, #0
 8003f1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	ea03 0501 	and.w	r5, r3, r1
 8003f26:	ea04 0602 	and.w	r6, r4, r2
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	4632      	mov	r2, r6
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	f04f 0400 	mov.w	r4, #0
 8003f36:	0154      	lsls	r4, r2, #5
 8003f38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f3c:	014b      	lsls	r3, r1, #5
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4622      	mov	r2, r4
 8003f42:	1b49      	subs	r1, r1, r5
 8003f44:	eb62 0206 	sbc.w	r2, r2, r6
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	f04f 0400 	mov.w	r4, #0
 8003f50:	0194      	lsls	r4, r2, #6
 8003f52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f56:	018b      	lsls	r3, r1, #6
 8003f58:	1a5b      	subs	r3, r3, r1
 8003f5a:	eb64 0402 	sbc.w	r4, r4, r2
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	00e2      	lsls	r2, r4, #3
 8003f68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f6c:	00d9      	lsls	r1, r3, #3
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4614      	mov	r4, r2
 8003f72:	195b      	adds	r3, r3, r5
 8003f74:	eb44 0406 	adc.w	r4, r4, r6
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	02a2      	lsls	r2, r4, #10
 8003f82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f86:	0299      	lsls	r1, r3, #10
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4614      	mov	r4, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	4621      	mov	r1, r4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f04f 0400 	mov.w	r4, #0
 8003f96:	461a      	mov	r2, r3
 8003f98:	4623      	mov	r3, r4
 8003f9a:	f7fc f991 	bl	80002c0 <__aeabi_uldivmod>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	60bb      	str	r3, [r7, #8]
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fc2:	60bb      	str	r3, [r7, #8]
      break;
 8003fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	00f42400 	.word	0x00f42400

08003fd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <HAL_RCC_GetHCLKFreq+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000000 	.word	0x20000000

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ff4:	f7ff fff0 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4601      	mov	r1, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0a9b      	lsrs	r3, r3, #10
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4a03      	ldr	r2, [pc, #12]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004006:	5cd3      	ldrb	r3, [r2, r3]
 8004008:	fa21 f303 	lsr.w	r3, r1, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40023800 	.word	0x40023800
 8004014:	08008890 	.word	0x08008890

08004018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800401c:	f7ff ffdc 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004020:	4601      	mov	r1, r0
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	0b5b      	lsrs	r3, r3, #13
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4a03      	ldr	r2, [pc, #12]	; (800403c <HAL_RCC_GetPCLK2Freq+0x24>)
 800402e:	5cd3      	ldrb	r3, [r2, r3]
 8004030:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40023800 	.word	0x40023800
 800403c:	08008890 	.word	0x08008890

08004040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d012      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004064:	4b65      	ldr	r3, [pc, #404]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a64      	ldr	r2, [pc, #400]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800406a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800406e:	6093      	str	r3, [r2, #8]
 8004070:	4b62      	ldr	r3, [pc, #392]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4960      	ldr	r1, [pc, #384]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d017      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004096:	4b59      	ldr	r3, [pc, #356]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a4:	4955      	ldr	r1, [pc, #340]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b4:	d101      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d017      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040d2:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	4946      	ldr	r1, [pc, #280]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f0:	d101      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80040f2:	2301      	movs	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 808b 	beq.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	4a39      	ldr	r2, [pc, #228]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411a:	6413      	str	r3, [r2, #64]	; 0x40
 800411c:	4b37      	ldr	r3, [pc, #220]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004128:	4b35      	ldr	r3, [pc, #212]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a34      	ldr	r2, [pc, #208]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800412e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004134:	f7fd fa44 	bl	80015c0 <HAL_GetTick>
 8004138:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413c:	f7fd fa40 	bl	80015c0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	; 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e2ba      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800414e:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800415a:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d035      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	429a      	cmp	r2, r3
 8004176:	d02e      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004178:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004180:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004182:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	4a1a      	ldr	r2, [pc, #104]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004198:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800419a:	4a18      	ldr	r2, [pc, #96]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041a0:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d114      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd fa08 	bl	80015c0 <HAL_GetTick>
 80041b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b2:	e00a      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fd fa04 	bl	80015c0 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e27c      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ee      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e2:	d111      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80041f2:	400b      	ands	r3, r1
 80041f4:	4901      	ldr	r1, [pc, #4]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
 80041fa:	e00b      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80041fc:	40023800 	.word	0x40023800
 8004200:	40007000 	.word	0x40007000
 8004204:	0ffffcff 	.word	0x0ffffcff
 8004208:	4ba3      	ldr	r3, [pc, #652]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4aa2      	ldr	r2, [pc, #648]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800420e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004212:	6093      	str	r3, [r2, #8]
 8004214:	4ba0      	ldr	r3, [pc, #640]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	499d      	ldr	r1, [pc, #628]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004222:	4313      	orrs	r3, r2
 8004224:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d010      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004232:	4b99      	ldr	r3, [pc, #612]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004238:	4a97      	ldr	r2, [pc, #604]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800423a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004242:	4b95      	ldr	r3, [pc, #596]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004244:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	4992      	ldr	r1, [pc, #584]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004260:	4b8d      	ldr	r3, [pc, #564]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	498a      	ldr	r1, [pc, #552]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004282:	4b85      	ldr	r3, [pc, #532]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004290:	4981      	ldr	r1, [pc, #516]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042a4:	4b7c      	ldr	r3, [pc, #496]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b2:	4979      	ldr	r1, [pc, #484]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c6:	4b74      	ldr	r3, [pc, #464]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f023 0203 	bic.w	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	4970      	ldr	r1, [pc, #448]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042e8:	4b6b      	ldr	r3, [pc, #428]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f023 020c 	bic.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	4968      	ldr	r1, [pc, #416]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800430a:	4b63      	ldr	r3, [pc, #396]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	495f      	ldr	r1, [pc, #380]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800432c:	4b5a      	ldr	r3, [pc, #360]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433a:	4957      	ldr	r1, [pc, #348]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800434e:	4b52      	ldr	r3, [pc, #328]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	494e      	ldr	r1, [pc, #312]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004370:	4b49      	ldr	r3, [pc, #292]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437e:	4946      	ldr	r1, [pc, #280]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004392:	4b41      	ldr	r3, [pc, #260]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	493d      	ldr	r1, [pc, #244]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043b4:	4b38      	ldr	r3, [pc, #224]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	4935      	ldr	r1, [pc, #212]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d011      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043d6:	4b30      	ldr	r3, [pc, #192]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e4:	492c      	ldr	r1, [pc, #176]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f4:	d101      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004414:	4920      	ldr	r1, [pc, #128]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004436:	4918      	ldr	r1, [pc, #96]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800444a:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004458:	490f      	ldr	r1, [pc, #60]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d005      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800446e:	f040 809c 	bne.w	80045aa <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004478:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800447c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447e:	f7fd f89f 	bl	80015c0 <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004484:	e00a      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004486:	f7fd f89b 	bl	80015c0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b64      	cmp	r3, #100	; 0x64
 8004492:	d903      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e115      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004498:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800449c:	4b8b      	ldr	r3, [pc, #556]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ee      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d017      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d113      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044bc:	4b83      	ldr	r3, [pc, #524]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c2:	0e1b      	lsrs	r3, r3, #24
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	019a      	lsls	r2, r3, #6
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	071b      	lsls	r3, r3, #28
 80044dc:	497b      	ldr	r1, [pc, #492]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004502:	2b00      	cmp	r3, #0
 8004504:	d024      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800450e:	d11f      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004510:	4b6e      	ldr	r3, [pc, #440]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004516:	0f1b      	lsrs	r3, r3, #28
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	019a      	lsls	r2, r3, #6
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	061b      	lsls	r3, r3, #24
 800452a:	431a      	orrs	r2, r3
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	071b      	lsls	r3, r3, #28
 8004530:	4966      	ldr	r1, [pc, #408]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004538:	4b64      	ldr	r3, [pc, #400]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800453a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453e:	f023 021f 	bic.w	r2, r3, #31
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	3b01      	subs	r3, #1
 8004548:	4960      	ldr	r1, [pc, #384]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00d      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	019a      	lsls	r2, r3, #6
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	061b      	lsls	r3, r3, #24
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	071b      	lsls	r3, r3, #28
 8004570:	4956      	ldr	r1, [pc, #344]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004578:	4b54      	ldr	r3, [pc, #336]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a53      	ldr	r2, [pc, #332]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800457e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004584:	f7fd f81c 	bl	80015c0 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800458a:	e008      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800458c:	f7fd f818 	bl	80015c0 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e092      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800459e:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 8088 	bne.w	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045b2:	4b46      	ldr	r3, [pc, #280]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a45      	ldr	r2, [pc, #276]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045be:	f7fc ffff 	bl	80015c0 <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045c6:	f7fc fffb 	bl	80015c0 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b64      	cmp	r3, #100	; 0x64
 80045d2:	d901      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e075      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045d8:	4b3c      	ldr	r3, [pc, #240]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e4:	d0ef      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004602:	2b00      	cmp	r3, #0
 8004604:	d024      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d120      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	019a      	lsls	r2, r3, #6
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	4927      	ldr	r1, [pc, #156]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004636:	4b25      	ldr	r3, [pc, #148]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	3b01      	subs	r3, #1
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	4920      	ldr	r1, [pc, #128]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d018      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004664:	d113      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	0e1b      	lsrs	r3, r3, #24
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	019a      	lsls	r2, r3, #6
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	431a      	orrs	r2, r3
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	4911      	ldr	r1, [pc, #68]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800468e:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a0e      	ldr	r2, [pc, #56]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469a:	f7fc ff91 	bl	80015c0 <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046a2:	f7fc ff8d 	bl	80015c0 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b64      	cmp	r3, #100	; 0x64
 80046ae:	d901      	bls.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e007      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c0:	d1ef      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3720      	adds	r7, #32
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40023800 	.word	0x40023800

080046d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e040      	b.n	8004764 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc f9f4 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2224      	movs	r2, #36	; 0x24
 80046fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0201 	bic.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8be 	bl	8004890 <UART_SetConfig>
 8004714:	4603      	mov	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e022      	b.n	8004764 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb5c 	bl	8004de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800473a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800474a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fbe3 	bl	8004f28 <UART_CheckIdleState>
 8004762:	4603      	mov	r3, r0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08a      	sub	sp, #40	; 0x28
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	2b20      	cmp	r3, #32
 8004782:	d17f      	bne.n	8004884 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_UART_Transmit+0x24>
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e078      	b.n	8004886 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Transmit+0x36>
 800479e:	2302      	movs	r3, #2
 80047a0:	e071      	b.n	8004886 <HAL_UART_Transmit+0x11a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2221      	movs	r2, #33	; 0x21
 80047b4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80047b6:	f7fc ff03 	bl	80015c0 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d108      	bne.n	80047e8 <HAL_UART_Transmit+0x7c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e003      	b.n	80047f0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80047f8:	e02c      	b.n	8004854 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fbbe 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e038      	b.n	8004886 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004828:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	3302      	adds	r3, #2
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	e007      	b.n	8004842 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1cc      	bne.n	80047fa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2200      	movs	r2, #0
 8004868:	2140      	movs	r1, #64	; 0x40
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fb8b 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e005      	b.n	8004886 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	e000      	b.n	8004886 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004884:	2302      	movs	r3, #2
  }
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4bb1      	ldr	r3, [pc, #708]	; (8004b84 <UART_SetConfig+0x2f4>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	6939      	ldr	r1, [r7, #16]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	430a      	orrs	r2, r1
 8004904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a9f      	ldr	r2, [pc, #636]	; (8004b88 <UART_SetConfig+0x2f8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d121      	bne.n	8004954 <UART_SetConfig+0xc4>
 8004910:	4b9e      	ldr	r3, [pc, #632]	; (8004b8c <UART_SetConfig+0x2fc>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b03      	cmp	r3, #3
 800491c:	d816      	bhi.n	800494c <UART_SetConfig+0xbc>
 800491e:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0x94>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004935 	.word	0x08004935
 8004928:	08004941 	.word	0x08004941
 800492c:	0800493b 	.word	0x0800493b
 8004930:	08004947 	.word	0x08004947
 8004934:	2301      	movs	r3, #1
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e151      	b.n	8004bde <UART_SetConfig+0x34e>
 800493a:	2302      	movs	r3, #2
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e14e      	b.n	8004bde <UART_SetConfig+0x34e>
 8004940:	2304      	movs	r3, #4
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e14b      	b.n	8004bde <UART_SetConfig+0x34e>
 8004946:	2308      	movs	r3, #8
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e148      	b.n	8004bde <UART_SetConfig+0x34e>
 800494c:	2310      	movs	r3, #16
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	bf00      	nop
 8004952:	e144      	b.n	8004bde <UART_SetConfig+0x34e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a8d      	ldr	r2, [pc, #564]	; (8004b90 <UART_SetConfig+0x300>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d134      	bne.n	80049c8 <UART_SetConfig+0x138>
 800495e:	4b8b      	ldr	r3, [pc, #556]	; (8004b8c <UART_SetConfig+0x2fc>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b0c      	cmp	r3, #12
 800496a:	d829      	bhi.n	80049c0 <UART_SetConfig+0x130>
 800496c:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <UART_SetConfig+0xe4>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	080049a9 	.word	0x080049a9
 8004978:	080049c1 	.word	0x080049c1
 800497c:	080049c1 	.word	0x080049c1
 8004980:	080049c1 	.word	0x080049c1
 8004984:	080049b5 	.word	0x080049b5
 8004988:	080049c1 	.word	0x080049c1
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049c1 	.word	0x080049c1
 8004994:	080049af 	.word	0x080049af
 8004998:	080049c1 	.word	0x080049c1
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049c1 	.word	0x080049c1
 80049a4:	080049bb 	.word	0x080049bb
 80049a8:	2300      	movs	r3, #0
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e117      	b.n	8004bde <UART_SetConfig+0x34e>
 80049ae:	2302      	movs	r3, #2
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e114      	b.n	8004bde <UART_SetConfig+0x34e>
 80049b4:	2304      	movs	r3, #4
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e111      	b.n	8004bde <UART_SetConfig+0x34e>
 80049ba:	2308      	movs	r3, #8
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e10e      	b.n	8004bde <UART_SetConfig+0x34e>
 80049c0:	2310      	movs	r3, #16
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	bf00      	nop
 80049c6:	e10a      	b.n	8004bde <UART_SetConfig+0x34e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a71      	ldr	r2, [pc, #452]	; (8004b94 <UART_SetConfig+0x304>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d120      	bne.n	8004a14 <UART_SetConfig+0x184>
 80049d2:	4b6e      	ldr	r3, [pc, #440]	; (8004b8c <UART_SetConfig+0x2fc>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d00f      	beq.n	8004a00 <UART_SetConfig+0x170>
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d802      	bhi.n	80049ea <UART_SetConfig+0x15a>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <UART_SetConfig+0x164>
 80049e8:	e010      	b.n	8004a0c <UART_SetConfig+0x17c>
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d005      	beq.n	80049fa <UART_SetConfig+0x16a>
 80049ee:	2b30      	cmp	r3, #48	; 0x30
 80049f0:	d009      	beq.n	8004a06 <UART_SetConfig+0x176>
 80049f2:	e00b      	b.n	8004a0c <UART_SetConfig+0x17c>
 80049f4:	2300      	movs	r3, #0
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e0f1      	b.n	8004bde <UART_SetConfig+0x34e>
 80049fa:	2302      	movs	r3, #2
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e0ee      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a00:	2304      	movs	r3, #4
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e0eb      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a06:	2308      	movs	r3, #8
 8004a08:	77fb      	strb	r3, [r7, #31]
 8004a0a:	e0e8      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	bf00      	nop
 8004a12:	e0e4      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a5f      	ldr	r2, [pc, #380]	; (8004b98 <UART_SetConfig+0x308>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d120      	bne.n	8004a60 <UART_SetConfig+0x1d0>
 8004a1e:	4b5b      	ldr	r3, [pc, #364]	; (8004b8c <UART_SetConfig+0x2fc>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d00f      	beq.n	8004a4c <UART_SetConfig+0x1bc>
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d802      	bhi.n	8004a36 <UART_SetConfig+0x1a6>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <UART_SetConfig+0x1b0>
 8004a34:	e010      	b.n	8004a58 <UART_SetConfig+0x1c8>
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d005      	beq.n	8004a46 <UART_SetConfig+0x1b6>
 8004a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a3c:	d009      	beq.n	8004a52 <UART_SetConfig+0x1c2>
 8004a3e:	e00b      	b.n	8004a58 <UART_SetConfig+0x1c8>
 8004a40:	2300      	movs	r3, #0
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e0cb      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	77fb      	strb	r3, [r7, #31]
 8004a4a:	e0c8      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e0c5      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a52:	2308      	movs	r3, #8
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e0c2      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	bf00      	nop
 8004a5e:	e0be      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a4d      	ldr	r2, [pc, #308]	; (8004b9c <UART_SetConfig+0x30c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d124      	bne.n	8004ab4 <UART_SetConfig+0x224>
 8004a6a:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <UART_SetConfig+0x2fc>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a78:	d012      	beq.n	8004aa0 <UART_SetConfig+0x210>
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7e:	d802      	bhi.n	8004a86 <UART_SetConfig+0x1f6>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <UART_SetConfig+0x204>
 8004a84:	e012      	b.n	8004aac <UART_SetConfig+0x21c>
 8004a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8a:	d006      	beq.n	8004a9a <UART_SetConfig+0x20a>
 8004a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a90:	d009      	beq.n	8004aa6 <UART_SetConfig+0x216>
 8004a92:	e00b      	b.n	8004aac <UART_SetConfig+0x21c>
 8004a94:	2300      	movs	r3, #0
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e0a1      	b.n	8004bde <UART_SetConfig+0x34e>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e09e      	b.n	8004bde <UART_SetConfig+0x34e>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e09b      	b.n	8004bde <UART_SetConfig+0x34e>
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e098      	b.n	8004bde <UART_SetConfig+0x34e>
 8004aac:	2310      	movs	r3, #16
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	bf00      	nop
 8004ab2:	e094      	b.n	8004bde <UART_SetConfig+0x34e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a39      	ldr	r2, [pc, #228]	; (8004ba0 <UART_SetConfig+0x310>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d124      	bne.n	8004b08 <UART_SetConfig+0x278>
 8004abe:	4b33      	ldr	r3, [pc, #204]	; (8004b8c <UART_SetConfig+0x2fc>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004acc:	d012      	beq.n	8004af4 <UART_SetConfig+0x264>
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad2:	d802      	bhi.n	8004ada <UART_SetConfig+0x24a>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <UART_SetConfig+0x258>
 8004ad8:	e012      	b.n	8004b00 <UART_SetConfig+0x270>
 8004ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ade:	d006      	beq.n	8004aee <UART_SetConfig+0x25e>
 8004ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae4:	d009      	beq.n	8004afa <UART_SetConfig+0x26a>
 8004ae6:	e00b      	b.n	8004b00 <UART_SetConfig+0x270>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e077      	b.n	8004bde <UART_SetConfig+0x34e>
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e074      	b.n	8004bde <UART_SetConfig+0x34e>
 8004af4:	2304      	movs	r3, #4
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e071      	b.n	8004bde <UART_SetConfig+0x34e>
 8004afa:	2308      	movs	r3, #8
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e06e      	b.n	8004bde <UART_SetConfig+0x34e>
 8004b00:	2310      	movs	r3, #16
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	bf00      	nop
 8004b06:	e06a      	b.n	8004bde <UART_SetConfig+0x34e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a25      	ldr	r2, [pc, #148]	; (8004ba4 <UART_SetConfig+0x314>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d124      	bne.n	8004b5c <UART_SetConfig+0x2cc>
 8004b12:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <UART_SetConfig+0x2fc>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b20:	d012      	beq.n	8004b48 <UART_SetConfig+0x2b8>
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	d802      	bhi.n	8004b2e <UART_SetConfig+0x29e>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <UART_SetConfig+0x2ac>
 8004b2c:	e012      	b.n	8004b54 <UART_SetConfig+0x2c4>
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b32:	d006      	beq.n	8004b42 <UART_SetConfig+0x2b2>
 8004b34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b38:	d009      	beq.n	8004b4e <UART_SetConfig+0x2be>
 8004b3a:	e00b      	b.n	8004b54 <UART_SetConfig+0x2c4>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e04d      	b.n	8004bde <UART_SetConfig+0x34e>
 8004b42:	2302      	movs	r3, #2
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e04a      	b.n	8004bde <UART_SetConfig+0x34e>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e047      	b.n	8004bde <UART_SetConfig+0x34e>
 8004b4e:	2308      	movs	r3, #8
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e044      	b.n	8004bde <UART_SetConfig+0x34e>
 8004b54:	2310      	movs	r3, #16
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	bf00      	nop
 8004b5a:	e040      	b.n	8004bde <UART_SetConfig+0x34e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <UART_SetConfig+0x318>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d139      	bne.n	8004bda <UART_SetConfig+0x34a>
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <UART_SetConfig+0x2fc>)
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b74:	d027      	beq.n	8004bc6 <UART_SetConfig+0x336>
 8004b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b7a:	d817      	bhi.n	8004bac <UART_SetConfig+0x31c>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01c      	beq.n	8004bba <UART_SetConfig+0x32a>
 8004b80:	e027      	b.n	8004bd2 <UART_SetConfig+0x342>
 8004b82:	bf00      	nop
 8004b84:	efff69f3 	.word	0xefff69f3
 8004b88:	40011000 	.word	0x40011000
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40004400 	.word	0x40004400
 8004b94:	40004800 	.word	0x40004800
 8004b98:	40004c00 	.word	0x40004c00
 8004b9c:	40005000 	.word	0x40005000
 8004ba0:	40011400 	.word	0x40011400
 8004ba4:	40007800 	.word	0x40007800
 8004ba8:	40007c00 	.word	0x40007c00
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb0:	d006      	beq.n	8004bc0 <UART_SetConfig+0x330>
 8004bb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bb6:	d009      	beq.n	8004bcc <UART_SetConfig+0x33c>
 8004bb8:	e00b      	b.n	8004bd2 <UART_SetConfig+0x342>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e00e      	b.n	8004bde <UART_SetConfig+0x34e>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e00b      	b.n	8004bde <UART_SetConfig+0x34e>
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e008      	b.n	8004bde <UART_SetConfig+0x34e>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e005      	b.n	8004bde <UART_SetConfig+0x34e>
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	bf00      	nop
 8004bd8:	e001      	b.n	8004bde <UART_SetConfig+0x34e>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be6:	d17f      	bne.n	8004ce8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004be8:	7ffb      	ldrb	r3, [r7, #31]
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d85c      	bhi.n	8004ca8 <UART_SetConfig+0x418>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <UART_SetConfig+0x364>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c19 	.word	0x08004c19
 8004bf8:	08004c39 	.word	0x08004c39
 8004bfc:	08004c59 	.word	0x08004c59
 8004c00:	08004ca9 	.word	0x08004ca9
 8004c04:	08004c71 	.word	0x08004c71
 8004c08:	08004ca9 	.word	0x08004ca9
 8004c0c:	08004ca9 	.word	0x08004ca9
 8004c10:	08004ca9 	.word	0x08004ca9
 8004c14:	08004c91 	.word	0x08004c91
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c18:	f7ff f9ea 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8004c1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	005a      	lsls	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	61bb      	str	r3, [r7, #24]
        break;
 8004c36:	e03a      	b.n	8004cae <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c38:	f7ff f9ee 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 8004c3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	005a      	lsls	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	441a      	add	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	61bb      	str	r3, [r7, #24]
        break;
 8004c56:	e02a      	b.n	8004cae <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	085a      	lsrs	r2, r3, #1
 8004c5e:	4b5f      	ldr	r3, [pc, #380]	; (8004ddc <UART_SetConfig+0x54c>)
 8004c60:	4413      	add	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6852      	ldr	r2, [r2, #4]
 8004c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	61bb      	str	r3, [r7, #24]
        break;
 8004c6e:	e01e      	b.n	8004cae <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c70:	f7ff f8dc 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8004c74:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	005a      	lsls	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	61bb      	str	r3, [r7, #24]
        break;
 8004c8e:	e00e      	b.n	8004cae <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	61bb      	str	r3, [r7, #24]
        break;
 8004ca6:	e002      	b.n	8004cae <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	75fb      	strb	r3, [r7, #23]
        break;
 8004cac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b0f      	cmp	r3, #15
 8004cb2:	d916      	bls.n	8004ce2 <UART_SetConfig+0x452>
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cba:	d212      	bcs.n	8004ce2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f023 030f 	bic.w	r3, r3, #15
 8004cc4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	897b      	ldrh	r3, [r7, #10]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	897a      	ldrh	r2, [r7, #10]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	e070      	b.n	8004dc4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
 8004ce6:	e06d      	b.n	8004dc4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004ce8:	7ffb      	ldrb	r3, [r7, #31]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d859      	bhi.n	8004da2 <UART_SetConfig+0x512>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0x464>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004d37 	.word	0x08004d37
 8004cfc:	08004d55 	.word	0x08004d55
 8004d00:	08004da3 	.word	0x08004da3
 8004d04:	08004d6d 	.word	0x08004d6d
 8004d08:	08004da3 	.word	0x08004da3
 8004d0c:	08004da3 	.word	0x08004da3
 8004d10:	08004da3 	.word	0x08004da3
 8004d14:	08004d8b 	.word	0x08004d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7ff f96a 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	085a      	lsrs	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	441a      	add	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	61bb      	str	r3, [r7, #24]
        break;
 8004d34:	e038      	b.n	8004da8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d36:	f7ff f96f 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 8004d3a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	085a      	lsrs	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	441a      	add	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	61bb      	str	r3, [r7, #24]
        break;
 8004d52:	e029      	b.n	8004da8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	085a      	lsrs	r2, r3, #1
 8004d5a:	4b21      	ldr	r3, [pc, #132]	; (8004de0 <UART_SetConfig+0x550>)
 8004d5c:	4413      	add	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6852      	ldr	r2, [r2, #4]
 8004d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	61bb      	str	r3, [r7, #24]
        break;
 8004d6a:	e01d      	b.n	8004da8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6c:	f7ff f85e 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8004d70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	085a      	lsrs	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	61bb      	str	r3, [r7, #24]
        break;
 8004d88:	e00e      	b.n	8004da8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	61bb      	str	r3, [r7, #24]
        break;
 8004da0:	e002      	b.n	8004da8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
        break;
 8004da6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b0f      	cmp	r3, #15
 8004dac:	d908      	bls.n	8004dc0 <UART_SetConfig+0x530>
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db4:	d204      	bcs.n	8004dc0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	e001      	b.n	8004dc4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	01e84800 	.word	0x01e84800
 8004de0:	00f42400 	.word	0x00f42400

08004de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01a      	beq.n	8004efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee2:	d10a      	bne.n	8004efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004f36:	f7fc fb43 	bl	80015c0 <HAL_GetTick>
 8004f3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d10e      	bne.n	8004f68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f814 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e00a      	b.n	8004f7e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	e05d      	b.n	8005054 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d059      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa0:	f7fc fb0e 	bl	80015c0 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d11b      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fc4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e042      	b.n	8005074 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d02b      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500a:	d123      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005014:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005024:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e00f      	b.n	8005074 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	429a      	cmp	r2, r3
 8005070:	d092      	beq.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800507c:	b084      	sub	sp, #16
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	f107 001c 	add.w	r0, r7, #28
 800508a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	2b01      	cmp	r3, #1
 8005092:	d126      	bne.n	80050e2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	4b3f      	ldr	r3, [pc, #252]	; (80051a4 <USB_CoreInit+0x128>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f043 0210 	orr.w	r2, r3, #16
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d105      	bne.n	80050d6 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 fa74 	bl	80065c4 <USB_CoreReset>
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]
 80050e0:	e048      	b.n	8005174 <USB_CoreInit+0xf8>
  }
#ifdef USB_HS_PHYC
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d134      	bne.n	8005152 <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <USB_CoreInit+0x128>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interace */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f023 0210 	bic.w	r2, r3, #16
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f001 fa81 	bl	800662c <USB_HS_PHYCInit>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e02f      	b.n	8005194 <USB_CoreInit+0x118>
    }

    if (cfg.use_external_vbus == 1U)
 8005134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d105      	bne.n	8005146 <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 fa3c 	bl	80065c4 <USB_CoreReset>
 800514c:	4603      	mov	r3, r0
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e010      	b.n	8005174 <USB_CoreInit+0xf8>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 fa30 	bl	80065c4 <USB_CoreReset>
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10b      	bne.n	8005192 <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f043 0206 	orr.w	r2, r3, #6
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005192:	7bfb      	ldrb	r3, [r7, #15]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800519e:	b004      	add	sp, #16
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	ffbdffbf 	.word	0xffbdffbf

080051a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	4613      	mov	r3, r2
 80051b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d165      	bne.n	8005288 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a41      	ldr	r2, [pc, #260]	; (80052c4 <USB_SetTurnaroundTime+0x11c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d906      	bls.n	80051d2 <USB_SetTurnaroundTime+0x2a>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a40      	ldr	r2, [pc, #256]	; (80052c8 <USB_SetTurnaroundTime+0x120>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d802      	bhi.n	80051d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051cc:	230f      	movs	r3, #15
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e062      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4a3c      	ldr	r2, [pc, #240]	; (80052c8 <USB_SetTurnaroundTime+0x120>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d906      	bls.n	80051e8 <USB_SetTurnaroundTime+0x40>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a3b      	ldr	r2, [pc, #236]	; (80052cc <USB_SetTurnaroundTime+0x124>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d802      	bhi.n	80051e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051e2:	230e      	movs	r3, #14
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e057      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4a38      	ldr	r2, [pc, #224]	; (80052cc <USB_SetTurnaroundTime+0x124>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d906      	bls.n	80051fe <USB_SetTurnaroundTime+0x56>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a37      	ldr	r2, [pc, #220]	; (80052d0 <USB_SetTurnaroundTime+0x128>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d802      	bhi.n	80051fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051f8:	230d      	movs	r3, #13
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e04c      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <USB_SetTurnaroundTime+0x128>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d906      	bls.n	8005214 <USB_SetTurnaroundTime+0x6c>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a32      	ldr	r2, [pc, #200]	; (80052d4 <USB_SetTurnaroundTime+0x12c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d802      	bhi.n	8005214 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800520e:	230c      	movs	r3, #12
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e041      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <USB_SetTurnaroundTime+0x12c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d906      	bls.n	800522a <USB_SetTurnaroundTime+0x82>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a2e      	ldr	r2, [pc, #184]	; (80052d8 <USB_SetTurnaroundTime+0x130>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d802      	bhi.n	800522a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005224:	230b      	movs	r3, #11
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e036      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <USB_SetTurnaroundTime+0x130>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d906      	bls.n	8005240 <USB_SetTurnaroundTime+0x98>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4a29      	ldr	r2, [pc, #164]	; (80052dc <USB_SetTurnaroundTime+0x134>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d802      	bhi.n	8005240 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800523a:	230a      	movs	r3, #10
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e02b      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4a26      	ldr	r2, [pc, #152]	; (80052dc <USB_SetTurnaroundTime+0x134>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d906      	bls.n	8005256 <USB_SetTurnaroundTime+0xae>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <USB_SetTurnaroundTime+0x138>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d802      	bhi.n	8005256 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005250:	2309      	movs	r3, #9
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e020      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <USB_SetTurnaroundTime+0x138>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d906      	bls.n	800526c <USB_SetTurnaroundTime+0xc4>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <USB_SetTurnaroundTime+0x13c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d802      	bhi.n	800526c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005266:	2308      	movs	r3, #8
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e015      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <USB_SetTurnaroundTime+0x13c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d906      	bls.n	8005282 <USB_SetTurnaroundTime+0xda>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <USB_SetTurnaroundTime+0x140>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d802      	bhi.n	8005282 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800527c:	2307      	movs	r3, #7
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e00a      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005282:	2306      	movs	r3, #6
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e007      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800528e:	2309      	movs	r3, #9
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e001      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005294:	2309      	movs	r3, #9
 8005296:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	029b      	lsls	r3, r3, #10
 80052ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	00d8acbf 	.word	0x00d8acbf
 80052c8:	00e4e1bf 	.word	0x00e4e1bf
 80052cc:	00f423ff 	.word	0x00f423ff
 80052d0:	0106737f 	.word	0x0106737f
 80052d4:	011a499f 	.word	0x011a499f
 80052d8:	01312cff 	.word	0x01312cff
 80052dc:	014ca43f 	.word	0x014ca43f
 80052e0:	016e35ff 	.word	0x016e35ff
 80052e4:	01a6ab1f 	.word	0x01a6ab1f
 80052e8:	01e847ff 	.word	0x01e847ff

080052ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f043 0201 	orr.w	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f023 0201 	bic.w	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d106      	bne.n	800535c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	e00b      	b.n	8005374 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	e001      	b.n	8005374 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e003      	b.n	800537c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005374:	2032      	movs	r0, #50	; 0x32
 8005376:	f7fc f92f 	bl	80015d8 <HAL_Delay>

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005384:	b084      	sub	sp, #16
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e009      	b.n	80053b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3340      	adds	r3, #64	; 0x40
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	3301      	adds	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b0e      	cmp	r3, #14
 80053bc:	d9f2      	bls.n	80053a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d11c      	bne.n	80053fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d2:	f043 0302 	orr.w	r3, r3, #2
 80053d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e005      	b.n	800540a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005410:	461a      	mov	r2, r3
 8005412:	2300      	movs	r3, #0
 8005414:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	4619      	mov	r1, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	461a      	mov	r2, r3
 8005426:	680b      	ldr	r3, [r1, #0]
 8005428:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10c      	bne.n	800544a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005436:	2100      	movs	r1, #0
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f959 	bl	80056f0 <USB_SetDevSpeed>
 800543e:	e018      	b.n	8005472 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005440:	2101      	movs	r1, #1
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f954 	bl	80056f0 <USB_SetDevSpeed>
 8005448:	e013      	b.n	8005472 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	2b03      	cmp	r3, #3
 800544e:	d10c      	bne.n	800546a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005456:	2100      	movs	r1, #0
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f949 	bl	80056f0 <USB_SetDevSpeed>
 800545e:	e008      	b.n	8005472 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005460:	2101      	movs	r1, #1
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f944 	bl	80056f0 <USB_SetDevSpeed>
 8005468:	e003      	b.n	8005472 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800546a:	2103      	movs	r1, #3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f93f 	bl	80056f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005472:	2110      	movs	r1, #16
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f8f3 	bl	8005660 <USB_FlushTxFifo>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f911 	bl	80056ac <USB_FlushRxFifo>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	461a      	mov	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	461a      	mov	r2, r3
 80054a8:	2300      	movs	r3, #0
 80054aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	461a      	mov	r2, r3
 80054b4:	2300      	movs	r3, #0
 80054b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	e043      	b.n	8005546 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d4:	d118      	bne.n	8005508 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	461a      	mov	r2, r3
 80054ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	e013      	b.n	800551a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	461a      	mov	r2, r3
 8005500:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	e008      	b.n	800551a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	461a      	mov	r2, r3
 8005516:	2300      	movs	r3, #0
 8005518:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	461a      	mov	r2, r3
 800553a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800553e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	3301      	adds	r3, #1
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	429a      	cmp	r2, r3
 800554c:	d3b7      	bcc.n	80054be <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800554e:	2300      	movs	r3, #0
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e043      	b.n	80055dc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800556a:	d118      	bne.n	800559e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	461a      	mov	r2, r3
 8005580:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e013      	b.n	80055b0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	461a      	mov	r2, r3
 8005596:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	e008      	b.n	80055b0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	461a      	mov	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	461a      	mov	r2, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	461a      	mov	r2, r3
 80055d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	3301      	adds	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d3b7      	bcc.n	8005554 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005604:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	f043 0210 	orr.w	r2, r3, #16
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <USB_DevInit+0x2d4>)
 800561e:	4313      	orrs	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f043 0208 	orr.w	r2, r3, #8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d105      	bne.n	8005648 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <USB_DevInit+0x2d8>)
 8005642:	4313      	orrs	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005654:	b004      	add	sp, #16
 8005656:	4770      	bx	lr
 8005658:	803c3800 	.word	0x803c3800
 800565c:	40000004 	.word	0x40000004

08005660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	019b      	lsls	r3, r3, #6
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3301      	adds	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <USB_FlushTxFifo+0x48>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d901      	bls.n	800568c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e006      	b.n	800569a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b20      	cmp	r3, #32
 8005696:	d0f0      	beq.n	800567a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	00030d40 	.word	0x00030d40

080056ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2210      	movs	r2, #16
 80056bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3301      	adds	r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <USB_FlushRxFifo+0x40>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d901      	bls.n	80056d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e006      	b.n	80056de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d0f0      	beq.n	80056be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	00030d40 	.word	0x00030d40

080056f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	68f9      	ldr	r1, [r7, #12]
 800570c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005710:	4313      	orrs	r3, r2
 8005712:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005722:	b480      	push	{r7}
 8005724:	b087      	sub	sp, #28
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0306 	and.w	r3, r3, #6
 800573a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005742:	2300      	movs	r3, #0
 8005744:	75fb      	strb	r3, [r7, #23]
 8005746:	e00a      	b.n	800575e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d002      	beq.n	8005754 <USB_GetDevSpeed+0x32>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b06      	cmp	r3, #6
 8005752:	d102      	bne.n	800575a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005754:	2302      	movs	r3, #2
 8005756:	75fb      	strb	r3, [r7, #23]
 8005758:	e001      	b.n	800575e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800575a:	230f      	movs	r3, #15
 800575c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800575e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005760:	4618      	mov	r0, r3
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d161      	bne.n	800584c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800579a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579e:	d11f      	bne.n	80057e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	2101      	movs	r1, #1
 80057f2:	fa01 f303 	lsl.w	r3, r1, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	68f9      	ldr	r1, [r7, #12]
 80057fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005800:	4013      	ands	r3, r2
 8005802:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	2101      	movs	r1, #1
 8005816:	fa01 f303 	lsl.w	r3, r1, r3
 800581a:	b29b      	uxth	r3, r3
 800581c:	43db      	mvns	r3, r3
 800581e:	68f9      	ldr	r1, [r7, #12]
 8005820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005824:	4013      	ands	r3, r2
 8005826:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	0159      	lsls	r1, r3, #5
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	440b      	add	r3, r1
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	4619      	mov	r1, r3
 8005844:	4b35      	ldr	r3, [pc, #212]	; (800591c <USB_DeactivateEndpoint+0x1b0>)
 8005846:	4013      	ands	r3, r2
 8005848:	600b      	str	r3, [r1, #0]
 800584a:	e060      	b.n	800590e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800585e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005862:	d11f      	bne.n	80058a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005882:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ba:	041b      	lsls	r3, r3, #16
 80058bc:	43db      	mvns	r3, r3
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c4:	4013      	ands	r3, r2
 80058c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	2101      	movs	r1, #1
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	43db      	mvns	r3, r3
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e8:	4013      	ands	r3, r2
 80058ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	0159      	lsls	r1, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	440b      	add	r3, r1
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	4619      	mov	r1, r3
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <USB_DeactivateEndpoint+0x1b4>)
 800590a:	4013      	ands	r3, r2
 800590c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	ec337800 	.word	0xec337800
 8005920:	eff37800 	.word	0xeff37800

08005924 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	2b01      	cmp	r3, #1
 8005942:	f040 8163 	bne.w	8005c0c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d132      	bne.n	80059b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	0159      	lsls	r1, r3, #5
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	440b      	add	r3, r1
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	4619      	mov	r1, r3
 800596a:	4ba5      	ldr	r3, [pc, #660]	; (8005c00 <USB_EPStartXfer+0x2dc>)
 800596c:	4013      	ands	r3, r2
 800596e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800598e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	0159      	lsls	r1, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	440b      	add	r3, r1
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	4619      	mov	r1, r3
 80059ac:	4b95      	ldr	r3, [pc, #596]	; (8005c04 <USB_EPStartXfer+0x2e0>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	610b      	str	r3, [r1, #16]
 80059b2:	e074      	b.n	8005a9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	0159      	lsls	r1, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	440b      	add	r3, r1
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	4619      	mov	r1, r3
 80059d0:	4b8c      	ldr	r3, [pc, #560]	; (8005c04 <USB_EPStartXfer+0x2e0>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	0159      	lsls	r1, r3, #5
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	440b      	add	r3, r1
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	4619      	mov	r1, r3
 80059f2:	4b83      	ldr	r3, [pc, #524]	; (8005c00 <USB_EPStartXfer+0x2dc>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6959      	ldr	r1, [r3, #20]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	440b      	add	r3, r1
 8005a10:	1e59      	subs	r1, r3, #1
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a1a:	04d9      	lsls	r1, r3, #19
 8005a1c:	4b7a      	ldr	r3, [pc, #488]	; (8005c08 <USB_EPStartXfer+0x2e4>)
 8005a1e:	400b      	ands	r3, r1
 8005a20:	69b9      	ldr	r1, [r7, #24]
 8005a22:	0148      	lsls	r0, r1, #5
 8005a24:	69f9      	ldr	r1, [r7, #28]
 8005a26:	4401      	add	r1, r0
 8005a28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a46:	69b9      	ldr	r1, [r7, #24]
 8005a48:	0148      	lsls	r0, r1, #5
 8005a4a:	69f9      	ldr	r1, [r7, #28]
 8005a4c:	4401      	add	r1, r0
 8005a4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a52:	4313      	orrs	r3, r2
 8005a54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	78db      	ldrb	r3, [r3, #3]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d11f      	bne.n	8005a9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d14b      	bne.n	8005b3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d009      	beq.n	8005ac0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d128      	bne.n	8005b1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d110      	bne.n	8005afa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	e00f      	b.n	8005b1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e133      	b.n	8005da4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	78db      	ldrb	r3, [r3, #3]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d015      	beq.n	8005b90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 811b 	beq.w	8005da4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	2101      	movs	r1, #1
 8005b80:	fa01 f303 	lsl.w	r3, r1, r3
 8005b84:	69f9      	ldr	r1, [r7, #28]
 8005b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	634b      	str	r3, [r1, #52]	; 0x34
 8005b8e:	e109      	b.n	8005da4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d110      	bne.n	8005bc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e00f      	b.n	8005be2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	68d9      	ldr	r1, [r3, #12]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	b298      	uxth	r0, r3
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fa38 	bl	800606c <USB_WritePacket>
 8005bfc:	e0d2      	b.n	8005da4 <USB_EPStartXfer+0x480>
 8005bfe:	bf00      	nop
 8005c00:	e007ffff 	.word	0xe007ffff
 8005c04:	fff80000 	.word	0xfff80000
 8005c08:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	0159      	lsls	r1, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	440b      	add	r3, r1
 8005c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c26:	4619      	mov	r1, r3
 8005c28:	4b61      	ldr	r3, [pc, #388]	; (8005db0 <USB_EPStartXfer+0x48c>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	0159      	lsls	r1, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	440b      	add	r3, r1
 8005c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4b5a      	ldr	r3, [pc, #360]	; (8005db4 <USB_EPStartXfer+0x490>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d123      	bne.n	8005ca0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c6e:	69b9      	ldr	r1, [r7, #24]
 8005c70:	0148      	lsls	r0, r1, #5
 8005c72:	69f9      	ldr	r1, [r7, #28]
 8005c74:	4401      	add	r1, r0
 8005c76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c9c:	6113      	str	r3, [r2, #16]
 8005c9e:	e033      	b.n	8005d08 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	4413      	add	r3, r2
 8005caa:	1e5a      	subs	r2, r3, #1
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	8afb      	ldrh	r3, [r7, #22]
 8005cc6:	04d9      	lsls	r1, r3, #19
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	; (8005db8 <USB_EPStartXfer+0x494>)
 8005cca:	400b      	ands	r3, r1
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	0148      	lsls	r0, r1, #5
 8005cd0:	69f9      	ldr	r1, [r7, #28]
 8005cd2:	4401      	add	r1, r0
 8005cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	8af9      	ldrh	r1, [r7, #22]
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf8:	69b9      	ldr	r1, [r7, #24]
 8005cfa:	0148      	lsls	r0, r1, #5
 8005cfc:	69f9      	ldr	r1, [r7, #28]
 8005cfe:	4401      	add	r1, r0
 8005d00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d04:	4313      	orrs	r3, r2
 8005d06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d10d      	bne.n	8005d2a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	68d9      	ldr	r1, [r3, #12]
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	460a      	mov	r2, r1
 8005d28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	78db      	ldrb	r3, [r3, #3]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d128      	bne.n	8005d84 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d110      	bne.n	8005d64 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e00f      	b.n	8005d84 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005da2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	fff80000 	.word	0xfff80000
 8005db4:	e007ffff 	.word	0xe007ffff
 8005db8:	1ff80000 	.word	0x1ff80000

08005dbc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	f040 80cd 	bne.w	8005f78 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d132      	bne.n	8005e4c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	0159      	lsls	r1, r3, #5
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	440b      	add	r3, r1
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	4619      	mov	r1, r3
 8005e02:	4b98      	ldr	r3, [pc, #608]	; (8006064 <USB_EP0StartXfer+0x2a8>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	0159      	lsls	r1, r3, #5
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	440b      	add	r3, r1
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	4619      	mov	r1, r3
 8005e44:	4b88      	ldr	r3, [pc, #544]	; (8006068 <USB_EP0StartXfer+0x2ac>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	610b      	str	r3, [r1, #16]
 8005e4a:	e04e      	b.n	8005eea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	0159      	lsls	r1, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	440b      	add	r3, r1
 8005e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e66:	4619      	mov	r1, r3
 8005e68:	4b7f      	ldr	r3, [pc, #508]	; (8006068 <USB_EP0StartXfer+0x2ac>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	0159      	lsls	r1, r3, #5
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	440b      	add	r3, r1
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4b76      	ldr	r3, [pc, #472]	; (8006064 <USB_EP0StartXfer+0x2a8>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	695a      	ldr	r2, [r3, #20]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d903      	bls.n	8005ea4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eda:	6939      	ldr	r1, [r7, #16]
 8005edc:	0148      	lsls	r0, r1, #5
 8005ede:	6979      	ldr	r1, [r7, #20]
 8005ee0:	4401      	add	r1, r0
 8005ee2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d11e      	bne.n	8005f2e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f04:	461a      	mov	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	e092      	b.n	8006054 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f4c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d07e      	beq.n	8006054 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	2101      	movs	r1, #1
 8005f68:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f72:	4313      	orrs	r3, r2
 8005f74:	634b      	str	r3, [r1, #52]	; 0x34
 8005f76:	e06d      	b.n	8006054 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f84:	691a      	ldr	r2, [r3, #16]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	0159      	lsls	r1, r3, #5
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	440b      	add	r3, r1
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f92:	4619      	mov	r1, r3
 8005f94:	4b34      	ldr	r3, [pc, #208]	; (8006068 <USB_EP0StartXfer+0x2ac>)
 8005f96:	4013      	ands	r3, r2
 8005f98:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	0159      	lsls	r1, r3, #5
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	440b      	add	r3, r1
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <USB_EP0StartXfer+0x2a8>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006002:	6939      	ldr	r1, [r7, #16]
 8006004:	0148      	lsls	r0, r1, #5
 8006006:	6979      	ldr	r1, [r7, #20]
 8006008:	4401      	add	r1, r0
 800600a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800600e:	4313      	orrs	r3, r2
 8006010:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d10d      	bne.n	8006034 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	68d9      	ldr	r1, [r3, #12]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006030:	460a      	mov	r2, r1
 8006032:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	440a      	add	r2, r1
 800604a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	e007ffff 	.word	0xe007ffff
 8006068:	fff80000 	.word	0xfff80000

0800606c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	; 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4611      	mov	r1, r2
 8006078:	461a      	mov	r2, r3
 800607a:	460b      	mov	r3, r1
 800607c:	71fb      	strb	r3, [r7, #7]
 800607e:	4613      	mov	r3, r2
 8006080:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800608a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800608e:	2b00      	cmp	r3, #0
 8006090:	d11a      	bne.n	80060c8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006092:	88bb      	ldrh	r3, [r7, #4]
 8006094:	3303      	adds	r3, #3
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	e00f      	b.n	80060c0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	031a      	lsls	r2, r3, #12
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ac:	461a      	mov	r2, r3
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3304      	adds	r3, #4
 80060b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	3301      	adds	r3, #1
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3eb      	bcc.n	80060a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3724      	adds	r7, #36	; 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b089      	sub	sp, #36	; 0x24
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	4613      	mov	r3, r2
 80060e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	3303      	adds	r3, #3
 80060f0:	089b      	lsrs	r3, r3, #2
 80060f2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e00b      	b.n	8006112 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	601a      	str	r2, [r3, #0]
    pDest++;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	3304      	adds	r3, #4
 800610a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	3301      	adds	r3, #1
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	d3ef      	bcc.n	80060fa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800611a:	69fb      	ldr	r3, [r7, #28]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3724      	adds	r7, #36	; 0x24
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d12c      	bne.n	800619e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	db12      	blt.n	800617c <USB_EPSetStall+0x54>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00f      	beq.n	800617c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006176:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800617a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	e02b      	b.n	80061f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	db12      	blt.n	80061d6 <USB_EPSetStall+0xae>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00f      	beq.n	80061d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d128      	bne.n	8006272 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800623e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	78db      	ldrb	r3, [r3, #3]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d003      	beq.n	8006250 <USB_EPClearStall+0x4c>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	78db      	ldrb	r3, [r3, #3]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d138      	bne.n	80062c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e027      	b.n	80062c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006290:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	78db      	ldrb	r3, [r3, #3]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d003      	beq.n	80062a2 <USB_EPClearStall+0x9e>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	78db      	ldrb	r3, [r3, #3]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d10f      	bne.n	80062c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006304:	68f9      	ldr	r1, [r7, #12]
 8006306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800630a:	4313      	orrs	r3, r2
 800630c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006336:	f023 0302 	bic.w	r3, r3, #2
 800633a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800633c:	2003      	movs	r0, #3
 800633e:	f7fb f94b 	bl	80015d8 <HAL_Delay>

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006366:	f043 0302 	orr.w	r3, r3, #2
 800636a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800636c:	2003      	movs	r0, #3
 800636e:	f7fb f933 	bl	80015d8 <HAL_Delay>

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4013      	ands	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006394:	68fb      	ldr	r3, [r7, #12]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	4013      	ands	r3, r2
 80063c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	0c1b      	lsrs	r3, r3, #16
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	4013      	ands	r3, r2
 80063f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	b29b      	uxth	r3, r3
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	4013      	ands	r3, r2
 8006436:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006438:	68bb      	ldr	r3, [r7, #8]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006446:	b480      	push	{r7}
 8006448:	b087      	sub	sp, #28
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006468:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	fa22 f303 	lsr.w	r3, r2, r3
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	b2db      	uxtb	r3, r3
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4013      	ands	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006494:	68bb      	ldr	r3, [r7, #8]
}
 8006496:	4618      	mov	r0, r3
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f003 0301 	and.w	r3, r3, #1
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064da:	4619      	mov	r1, r3
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <USB_ActivateSetup+0x44>)
 80064de:	4013      	ands	r3, r2
 80064e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	fffff800 	.word	0xfffff800

08006508 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	460b      	mov	r3, r1
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	333c      	adds	r3, #60	; 0x3c
 800651e:	3304      	adds	r3, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <USB_EP0_OutStart+0xb8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d90a      	bls.n	8006542 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800653c:	d101      	bne.n	8006542 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	e037      	b.n	80065b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006548:	461a      	mov	r2, r3
 800654a:	2300      	movs	r3, #0
 800654c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006560:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006570:	f043 0318 	orr.w	r3, r3, #24
 8006574:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006584:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006588:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800658a:	7afb      	ldrb	r3, [r7, #11]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d10f      	bne.n	80065b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	4f54300a 	.word	0x4f54300a

080065c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a13      	ldr	r2, [pc, #76]	; (8006628 <USB_CoreReset+0x64>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e01b      	b.n	800661a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	daf2      	bge.n	80065d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f043 0201 	orr.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3301      	adds	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a09      	ldr	r2, [pc, #36]	; (8006628 <USB_CoreReset+0x64>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e006      	b.n	800661a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d0f0      	beq.n	80065fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	00030d40 	.word	0x00030d40

0800662c <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  uint32_t count = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 8006638:	4b16      	ldr	r3, [pc, #88]	; (8006694 <USB_HS_PHYCInit+0x68>)
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	4a15      	ldr	r2, [pc, #84]	; (8006694 <USB_HS_PHYCInit+0x68>)
 800663e:	f043 0304 	orr.w	r3, r3, #4
 8006642:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8006644:	e008      	b.n	8006658 <USB_HS_PHYCInit+0x2c>
  {
    if (++count > 200000U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a12      	ldr	r2, [pc, #72]	; (8006698 <USB_HS_PHYCInit+0x6c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d901      	bls.n	8006658 <USB_HS_PHYCInit+0x2c>
    {
      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e019      	b.n	800668c <USB_HS_PHYCInit+0x60>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <USB_HS_PHYCInit+0x68>)
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0f0      	beq.n	8006646 <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x2U << 1);
  }
  else if (HSE_VALUE == 16000000U) /* HSE = 16MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x3U << 1);
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <USB_HS_PHYCInit+0x68>)
 8006666:	2206      	movs	r2, #6
 8006668:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <USB_HS_PHYCInit+0x68>)
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	4909      	ldr	r1, [pc, #36]	; (8006694 <USB_HS_PHYCInit+0x68>)
 8006670:	f640 7313 	movw	r3, #3859	; 0xf13
 8006674:	4313      	orrs	r3, r2
 8006676:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 8006678:	4b06      	ldr	r3, [pc, #24]	; (8006694 <USB_HS_PHYCInit+0x68>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a05      	ldr	r2, [pc, #20]	; (8006694 <USB_HS_PHYCInit+0x68>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	6013      	str	r3, [r2, #0]

  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 8006684:	2002      	movs	r0, #2
 8006686:	f7fa ffa7 	bl	80015d8 <HAL_Delay>

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	40017c00 	.word	0x40017c00
 8006698:	00030d40 	.word	0x00030d40

0800669c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	4613      	mov	r3, r2
 80066a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80066b0:	481a      	ldr	r0, [pc, #104]	; (800671c <USBD_Init+0x80>)
 80066b2:	f001 f927 	bl	8007904 <iprintf>
 80066b6:	481a      	ldr	r0, [pc, #104]	; (8006720 <USBD_Init+0x84>)
 80066b8:	f001 f924 	bl	8007904 <iprintf>
 80066bc:	200a      	movs	r0, #10
 80066be:	f001 f939 	bl	8007934 <putchar>
#endif
    return USBD_FAIL;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e025      	b.n	8006712 <USBD_Init+0x76>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <USBD_Init+0x4e>
  {
    pdev->pConfDesc = NULL;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <USBD_Init+0x5c>
  {
    pdev->pDesc = pdesc;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	79fa      	ldrb	r2, [r7, #7]
 8006704:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7fa fba4 	bl	8000e54 <USBD_LL_Init>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	08008848 	.word	0x08008848
 8006720:	08008850 	.word	0x08008850

08006724 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8006738:	480f      	ldr	r0, [pc, #60]	; (8006778 <USBD_RegisterClass+0x54>)
 800673a:	f001 f8e3 	bl	8007904 <iprintf>
 800673e:	480f      	ldr	r0, [pc, #60]	; (800677c <USBD_RegisterClass+0x58>)
 8006740:	f001 f8e0 	bl	8007904 <iprintf>
 8006744:	200a      	movs	r0, #10
 8006746:	f001 f8f5 	bl	8007934 <putchar>
#endif
    return USBD_FAIL;
 800674a:	2303      	movs	r3, #3
 800674c:	e010      	b.n	8006770 <USBD_RegisterClass+0x4c>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	f107 020e 	add.w	r2, r7, #14
 8006762:	4610      	mov	r0, r2
 8006764:	4798      	blx	r3
 8006766:	4602      	mov	r2, r0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	08008848 	.word	0x08008848
 800677c:	08008868 	.word	0x08008868

08006780 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7fa fb85 	bl	8000e98 <USBD_LL_Start>
 800678e:	4603      	mov	r3, r0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067ba:	2303      	movs	r3, #3
 80067bc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d009      	beq.n	80067dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	4611      	mov	r1, r2
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	4611      	mov	r1, r2
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
  }

  return USBD_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f000 ff2b 	bl	8007684 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800683c:	461a      	mov	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800684a:	f003 031f 	and.w	r3, r3, #31
 800684e:	2b01      	cmp	r3, #1
 8006850:	d00e      	beq.n	8006870 <USBD_LL_SetupStage+0x5a>
 8006852:	2b01      	cmp	r3, #1
 8006854:	d302      	bcc.n	800685c <USBD_LL_SetupStage+0x46>
 8006856:	2b02      	cmp	r3, #2
 8006858:	d014      	beq.n	8006884 <USBD_LL_SetupStage+0x6e>
 800685a:	e01d      	b.n	8006898 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa17 	bl	8006c98 <USBD_StdDevReq>
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]
      break;
 800686e:	e020      	b.n	80068b2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fa7b 	bl	8006d74 <USBD_StdItfReq>
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]
      break;
 8006882:	e016      	b.n	80068b2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fab7 	bl	8006e00 <USBD_StdEPReq>
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
      break;
 8006896:	e00c      	b.n	80068b2 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800689e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fa fb37 	bl	8000f1a <USBD_LL_StallEP>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]
      break;
 80068b0:	bf00      	nop
  }

  return ret;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	460b      	mov	r3, r1
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068ca:	7afb      	ldrb	r3, [r7, #11]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d137      	bne.n	8006940 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d14a      	bne.n	8006978 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d913      	bls.n	8006916 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	4293      	cmp	r3, r2
 8006906:	bf28      	it	cs
 8006908:	4613      	movcs	r3, r2
 800690a:	461a      	mov	r2, r3
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 ff8f 	bl	8007832 <USBD_CtlContinueRx>
 8006914:	e030      	b.n	8006978 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006928:	2b03      	cmp	r3, #3
 800692a:	d105      	bne.n	8006938 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 ff8b 	bl	8007854 <USBD_CtlSendStatus>
 800693e:	e01b      	b.n	8006978 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d013      	beq.n	8006974 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006952:	2b03      	cmp	r3, #3
 8006954:	d10e      	bne.n	8006974 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	7afa      	ldrb	r2, [r7, #11]
 8006960:	4611      	mov	r1, r2
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	4798      	blx	r3
 8006966:	4603      	mov	r3, r0
 8006968:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	e002      	b.n	800697a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006974:	2303      	movs	r3, #3
 8006976:	e000      	b.n	800697a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	460b      	mov	r3, r1
 800698c:	607a      	str	r2, [r7, #4]
 800698e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d16a      	bne.n	8006a6c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3314      	adds	r3, #20
 800699a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d155      	bne.n	8006a52 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d914      	bls.n	80069dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 ff21 	bl	8007810 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7fa fb32 	bl	800103e <USBD_LL_PrepareReceive>
 80069da:	e03a      	b.n	8006a52 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d11c      	bne.n	8006a22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d316      	bcc.n	8006a22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d20f      	bcs.n	8006a22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 ff02 	bl	8007810 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a14:	2300      	movs	r3, #0
 8006a16:	2200      	movs	r2, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7fa fb0f 	bl	800103e <USBD_LL_PrepareReceive>
 8006a20:	e017      	b.n	8006a52 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d105      	bne.n	8006a44 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a44:	2180      	movs	r1, #128	; 0x80
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7fa fa67 	bl	8000f1a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 ff14 	bl	800787a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d123      	bne.n	8006aa4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff fe9b 	bl	8006798 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a6a:	e01b      	b.n	8006aa4 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d013      	beq.n	8006aa0 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d10e      	bne.n	8006aa0 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	7afa      	ldrb	r2, [r7, #11]
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	4798      	blx	r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	e002      	b.n	8006aa6 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e000      	b.n	8006aa6 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6852      	ldr	r2, [r2, #4]
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	4611      	mov	r1, r2
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006af2:	2340      	movs	r3, #64	; 0x40
 8006af4:	2200      	movs	r2, #0
 8006af6:	2100      	movs	r1, #0
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7fa f9e2 	bl	8000ec2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2240      	movs	r2, #64	; 0x40
 8006b0a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b0e:	2340      	movs	r3, #64	; 0x40
 8006b10:	2200      	movs	r2, #0
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fa f9d4 	bl	8000ec2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2240      	movs	r2, #64	; 0x40
 8006b24:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	78fa      	ldrb	r2, [r7, #3]
 8006b40:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2204      	movs	r2, #4
 8006b68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d105      	bne.n	8006b98 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d10b      	bne.n	8006bd0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6852      	ldr	r2, [r2, #4]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
  }

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	3301      	adds	r3, #1
 8006c72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c7a:	8a3b      	ldrh	r3, [r7, #16]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	b21a      	sxth	r2, r3
 8006c80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	b21b      	sxth	r3, r3
 8006c88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c8a:	89fb      	ldrh	r3, [r7, #14]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d004      	beq.n	8006cbc <USBD_StdDevReq+0x24>
 8006cb2:	2b40      	cmp	r3, #64	; 0x40
 8006cb4:	d002      	beq.n	8006cbc <USBD_StdDevReq+0x24>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <USBD_StdDevReq+0x38>
 8006cba:	e050      	b.n	8006d5e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
 8006cca:	4603      	mov	r3, r0
 8006ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8006cce:	e04b      	b.n	8006d68 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b09      	cmp	r3, #9
 8006cd6:	d83c      	bhi.n	8006d52 <USBD_StdDevReq+0xba>
 8006cd8:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <USBD_StdDevReq+0x48>)
 8006cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cde:	bf00      	nop
 8006ce0:	08006d35 	.word	0x08006d35
 8006ce4:	08006d49 	.word	0x08006d49
 8006ce8:	08006d53 	.word	0x08006d53
 8006cec:	08006d3f 	.word	0x08006d3f
 8006cf0:	08006d53 	.word	0x08006d53
 8006cf4:	08006d13 	.word	0x08006d13
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d53 	.word	0x08006d53
 8006d00:	08006d2b 	.word	0x08006d2b
 8006d04:	08006d1d 	.word	0x08006d1d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f9ce 	bl	80070ac <USBD_GetDescriptor>
      break;
 8006d10:	e024      	b.n	8006d5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fb33 	bl	8007380 <USBD_SetAddress>
      break;
 8006d1a:	e01f      	b.n	8006d5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fb70 	bl	8007404 <USBD_SetConfig>
 8006d24:	4603      	mov	r3, r0
 8006d26:	73fb      	strb	r3, [r7, #15]
      break;
 8006d28:	e018      	b.n	8006d5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fc0d 	bl	800754c <USBD_GetConfig>
      break;
 8006d32:	e013      	b.n	8006d5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fc3c 	bl	80075b4 <USBD_GetStatus>
      break;
 8006d3c:	e00e      	b.n	8006d5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fc6a 	bl	800761a <USBD_SetFeature>
      break;
 8006d46:	e009      	b.n	8006d5c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fc79 	bl	8007642 <USBD_ClrFeature>
      break;
 8006d50:	e004      	b.n	8006d5c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fccf 	bl	80076f8 <USBD_CtlError>
      break;
 8006d5a:	bf00      	nop
    }
    break;
 8006d5c:	e004      	b.n	8006d68 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fcc9 	bl	80076f8 <USBD_CtlError>
    break;
 8006d66:	bf00      	nop
  }

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop

08006d74 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d003      	beq.n	8006d96 <USBD_StdItfReq+0x22>
 8006d8e:	2b40      	cmp	r3, #64	; 0x40
 8006d90:	d001      	beq.n	8006d96 <USBD_StdItfReq+0x22>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d12a      	bne.n	8006dec <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d81d      	bhi.n	8006dde <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	889b      	ldrh	r3, [r3, #4]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d813      	bhi.n	8006dd4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	88db      	ldrh	r3, [r3, #6]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d110      	bne.n	8006de8 <USBD_StdItfReq+0x74>
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10d      	bne.n	8006de8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fd41 	bl	8007854 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006dd2:	e009      	b.n	8006de8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fc8e 	bl	80076f8 <USBD_CtlError>
      break;
 8006ddc:	e004      	b.n	8006de8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc89 	bl	80076f8 <USBD_CtlError>
      break;
 8006de6:	e000      	b.n	8006dea <USBD_StdItfReq+0x76>
      break;
 8006de8:	bf00      	nop
    }
    break;
 8006dea:	e004      	b.n	8006df6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fc82 	bl	80076f8 <USBD_CtlError>
    break;
 8006df4:	bf00      	nop
  }

  return ret;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	889b      	ldrh	r3, [r3, #4]
 8006e12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d004      	beq.n	8006e2a <USBD_StdEPReq+0x2a>
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	d002      	beq.n	8006e2a <USBD_StdEPReq+0x2a>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <USBD_StdEPReq+0x3e>
 8006e28:	e135      	b.n	8007096 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	4798      	blx	r3
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e3c:	e130      	b.n	80070a0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d03e      	beq.n	8006ec4 <USBD_StdEPReq+0xc4>
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d002      	beq.n	8006e50 <USBD_StdEPReq+0x50>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d077      	beq.n	8006f3e <USBD_StdEPReq+0x13e>
 8006e4e:	e11c      	b.n	800708a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d002      	beq.n	8006e60 <USBD_StdEPReq+0x60>
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d015      	beq.n	8006e8a <USBD_StdEPReq+0x8a>
 8006e5e:	e02b      	b.n	8006eb8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00c      	beq.n	8006e80 <USBD_StdEPReq+0x80>
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b80      	cmp	r3, #128	; 0x80
 8006e6a:	d009      	beq.n	8006e80 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fa f852 	bl	8000f1a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e76:	2180      	movs	r1, #128	; 0x80
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fa f84e 	bl	8000f1a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e7e:	e020      	b.n	8006ec2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fc38 	bl	80076f8 <USBD_CtlError>
        break;
 8006e88:	e01b      	b.n	8006ec2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	885b      	ldrh	r3, [r3, #2]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10e      	bne.n	8006eb0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00b      	beq.n	8006eb0 <USBD_StdEPReq+0xb0>
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b80      	cmp	r3, #128	; 0x80
 8006e9c:	d008      	beq.n	8006eb0 <USBD_StdEPReq+0xb0>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	88db      	ldrh	r3, [r3, #6]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d104      	bne.n	8006eb0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fa f835 	bl	8000f1a <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fccf 	bl	8007854 <USBD_CtlSendStatus>

        break;
 8006eb6:	e004      	b.n	8006ec2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fc1c 	bl	80076f8 <USBD_CtlError>
        break;
 8006ec0:	bf00      	nop
      }
      break;
 8006ec2:	e0e7      	b.n	8007094 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d002      	beq.n	8006ed4 <USBD_StdEPReq+0xd4>
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d015      	beq.n	8006efe <USBD_StdEPReq+0xfe>
 8006ed2:	e02d      	b.n	8006f30 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00c      	beq.n	8006ef4 <USBD_StdEPReq+0xf4>
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	2b80      	cmp	r3, #128	; 0x80
 8006ede:	d009      	beq.n	8006ef4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7fa f818 	bl	8000f1a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eea:	2180      	movs	r1, #128	; 0x80
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7fa f814 	bl	8000f1a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006ef2:	e023      	b.n	8006f3c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fbfe 	bl	80076f8 <USBD_CtlError>
        break;
 8006efc:	e01e      	b.n	8006f3c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d119      	bne.n	8006f3a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7fa f819 	bl	8000f4c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fc9a 	bl	8007854 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
        }
        break;
 8006f2e:	e004      	b.n	8006f3a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fbe0 	bl	80076f8 <USBD_CtlError>
        break;
 8006f38:	e000      	b.n	8006f3c <USBD_StdEPReq+0x13c>
        break;
 8006f3a:	bf00      	nop
      }
      break;
 8006f3c:	e0aa      	b.n	8007094 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d002      	beq.n	8006f4e <USBD_StdEPReq+0x14e>
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d032      	beq.n	8006fb2 <USBD_StdEPReq+0x1b2>
 8006f4c:	e097      	b.n	800707e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <USBD_StdEPReq+0x164>
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b80      	cmp	r3, #128	; 0x80
 8006f58:	d004      	beq.n	8006f64 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fbcb 	bl	80076f8 <USBD_CtlError>
          break;
 8006f62:	e091      	b.n	8007088 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da0b      	bge.n	8006f84 <USBD_StdEPReq+0x184>
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	3310      	adds	r3, #16
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4413      	add	r3, r2
 8006f80:	3304      	adds	r3, #4
 8006f82:	e00b      	b.n	8006f9c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
 8006f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	4413      	add	r3, r2
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fc15 	bl	80077da <USBD_CtlSendData>
        break;
 8006fb0:	e06a      	b.n	8007088 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	da11      	bge.n	8006fde <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
 8006fbc:	f003 020f 	and.w	r2, r3, #15
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	3324      	adds	r3, #36	; 0x24
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d117      	bne.n	8007004 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb8e 	bl	80076f8 <USBD_CtlError>
            break;
 8006fdc:	e054      	b.n	8007088 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d104      	bne.n	8007004 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fb7b 	bl	80076f8 <USBD_CtlError>
            break;
 8007002:	e041      	b.n	8007088 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	da0b      	bge.n	8007024 <USBD_StdEPReq+0x224>
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	3310      	adds	r3, #16
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	4413      	add	r3, r2
 8007020:	3304      	adds	r3, #4
 8007022:	e00b      	b.n	800703c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4413      	add	r3, r2
 800703a:	3304      	adds	r3, #4
 800703c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <USBD_StdEPReq+0x24a>
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b80      	cmp	r3, #128	; 0x80
 8007048:	d103      	bne.n	8007052 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	e00e      	b.n	8007070 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7f9 ff91 	bl	8000f7e <USBD_LL_IsStallEP>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2201      	movs	r2, #1
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e002      	b.n	8007070 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2202      	movs	r2, #2
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fbaf 	bl	80077da <USBD_CtlSendData>
          break;
 800707c:	e004      	b.n	8007088 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fb39 	bl	80076f8 <USBD_CtlError>
        break;
 8007086:	bf00      	nop
      }
      break;
 8007088:	e004      	b.n	8007094 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fb33 	bl	80076f8 <USBD_CtlError>
      break;
 8007092:	bf00      	nop
    }
    break;
 8007094:	e004      	b.n	80070a0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb2d 	bl	80076f8 <USBD_CtlError>
    break;
 800709e:	bf00      	nop
  }

  return ret;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	885b      	ldrh	r3, [r3, #2]
 80070c6:	0a1b      	lsrs	r3, r3, #8
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	2b06      	cmp	r3, #6
 80070ce:	f200 8128 	bhi.w	8007322 <USBD_GetDescriptor+0x276>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <USBD_GetDescriptor+0x2c>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	080070f5 	.word	0x080070f5
 80070dc:	0800710d 	.word	0x0800710d
 80070e0:	0800714d 	.word	0x0800714d
 80070e4:	08007323 	.word	0x08007323
 80070e8:	08007323 	.word	0x08007323
 80070ec:	080072c3 	.word	0x080072c3
 80070f0:	080072ef 	.word	0x080072ef
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	7c12      	ldrb	r2, [r2, #16]
 8007100:	f107 0108 	add.w	r1, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
    break;
 800710a:	e112      	b.n	8007332 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	7c1b      	ldrb	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10d      	bne.n	8007130 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	f107 0208 	add.w	r2, r7, #8
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	2202      	movs	r2, #2
 800712c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800712e:	e100      	b.n	8007332 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	f107 0208 	add.w	r2, r7, #8
 800713c:	4610      	mov	r0, r2
 800713e:	4798      	blx	r3
 8007140:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3301      	adds	r3, #1
 8007146:	2202      	movs	r2, #2
 8007148:	701a      	strb	r2, [r3, #0]
    break;
 800714a:	e0f2      	b.n	8007332 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	885b      	ldrh	r3, [r3, #2]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b05      	cmp	r3, #5
 8007154:	f200 80ac 	bhi.w	80072b0 <USBD_GetDescriptor+0x204>
 8007158:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <USBD_GetDescriptor+0xb4>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	08007179 	.word	0x08007179
 8007164:	080071ad 	.word	0x080071ad
 8007168:	080071e1 	.word	0x080071e1
 800716c:	08007215 	.word	0x08007215
 8007170:	08007249 	.word	0x08007249
 8007174:	0800727d 	.word	0x0800727d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00b      	beq.n	800719c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	7c12      	ldrb	r2, [r2, #16]
 8007190:	f107 0108 	add.w	r1, r7, #8
 8007194:	4610      	mov	r0, r2
 8007196:	4798      	blx	r3
 8007198:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800719a:	e091      	b.n	80072c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 faaa 	bl	80076f8 <USBD_CtlError>
        err++;
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	3301      	adds	r3, #1
 80071a8:	72fb      	strb	r3, [r7, #11]
      break;
 80071aa:	e089      	b.n	80072c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	7c12      	ldrb	r2, [r2, #16]
 80071c4:	f107 0108 	add.w	r1, r7, #8
 80071c8:	4610      	mov	r0, r2
 80071ca:	4798      	blx	r3
 80071cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ce:	e077      	b.n	80072c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa90 	bl	80076f8 <USBD_CtlError>
        err++;
 80071d8:	7afb      	ldrb	r3, [r7, #11]
 80071da:	3301      	adds	r3, #1
 80071dc:	72fb      	strb	r3, [r7, #11]
      break;
 80071de:	e06f      	b.n	80072c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00b      	beq.n	8007204 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	7c12      	ldrb	r2, [r2, #16]
 80071f8:	f107 0108 	add.w	r1, r7, #8
 80071fc:	4610      	mov	r0, r2
 80071fe:	4798      	blx	r3
 8007200:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007202:	e05d      	b.n	80072c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa76 	bl	80076f8 <USBD_CtlError>
        err++;
 800720c:	7afb      	ldrb	r3, [r7, #11]
 800720e:	3301      	adds	r3, #1
 8007210:	72fb      	strb	r3, [r7, #11]
      break;
 8007212:	e055      	b.n	80072c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	7c12      	ldrb	r2, [r2, #16]
 800722c:	f107 0108 	add.w	r1, r7, #8
 8007230:	4610      	mov	r0, r2
 8007232:	4798      	blx	r3
 8007234:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007236:	e043      	b.n	80072c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa5c 	bl	80076f8 <USBD_CtlError>
        err++;
 8007240:	7afb      	ldrb	r3, [r7, #11]
 8007242:	3301      	adds	r3, #1
 8007244:	72fb      	strb	r3, [r7, #11]
      break;
 8007246:	e03b      	b.n	80072c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7c12      	ldrb	r2, [r2, #16]
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800726a:	e029      	b.n	80072c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fa42 	bl	80076f8 <USBD_CtlError>
        err++;
 8007274:	7afb      	ldrb	r3, [r7, #11]
 8007276:	3301      	adds	r3, #1
 8007278:	72fb      	strb	r3, [r7, #11]
      break;
 800727a:	e021      	b.n	80072c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	7c12      	ldrb	r2, [r2, #16]
 8007294:	f107 0108 	add.w	r1, r7, #8
 8007298:	4610      	mov	r0, r2
 800729a:	4798      	blx	r3
 800729c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800729e:	e00f      	b.n	80072c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa28 	bl	80076f8 <USBD_CtlError>
        err++;
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	3301      	adds	r3, #1
 80072ac:	72fb      	strb	r3, [r7, #11]
      break;
 80072ae:	e007      	b.n	80072c0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa20 	bl	80076f8 <USBD_CtlError>
      err++;
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	3301      	adds	r3, #1
 80072bc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80072be:	bf00      	nop
    }
    break;
 80072c0:	e037      	b.n	8007332 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	7c1b      	ldrb	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d2:	f107 0208 	add.w	r2, r7, #8
 80072d6:	4610      	mov	r0, r2
 80072d8:	4798      	blx	r3
 80072da:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80072dc:	e029      	b.n	8007332 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fa09 	bl	80076f8 <USBD_CtlError>
      err++;
 80072e6:	7afb      	ldrb	r3, [r7, #11]
 80072e8:	3301      	adds	r3, #1
 80072ea:	72fb      	strb	r3, [r7, #11]
    break;
 80072ec:	e021      	b.n	8007332 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	7c1b      	ldrb	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10d      	bne.n	8007312 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	f107 0208 	add.w	r2, r7, #8
 8007302:	4610      	mov	r0, r2
 8007304:	4798      	blx	r3
 8007306:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	2207      	movs	r2, #7
 800730e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007310:	e00f      	b.n	8007332 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f9ef 	bl	80076f8 <USBD_CtlError>
      err++;
 800731a:	7afb      	ldrb	r3, [r7, #11]
 800731c:	3301      	adds	r3, #1
 800731e:	72fb      	strb	r3, [r7, #11]
    break;
 8007320:	e007      	b.n	8007332 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f9e7 	bl	80076f8 <USBD_CtlError>
    err++;
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	3301      	adds	r3, #1
 800732e:	72fb      	strb	r3, [r7, #11]
    break;
 8007330:	bf00      	nop
  }

  if (err != 0U)
 8007332:	7afb      	ldrb	r3, [r7, #11]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d11e      	bne.n	8007376 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	88db      	ldrh	r3, [r3, #6]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d016      	beq.n	800736e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007340:	893b      	ldrh	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00e      	beq.n	8007364 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	88da      	ldrh	r2, [r3, #6]
 800734a:	893b      	ldrh	r3, [r7, #8]
 800734c:	4293      	cmp	r3, r2
 800734e:	bf28      	it	cs
 8007350:	4613      	movcs	r3, r2
 8007352:	b29b      	uxth	r3, r3
 8007354:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007356:	893b      	ldrh	r3, [r7, #8]
 8007358:	461a      	mov	r2, r3
 800735a:	68f9      	ldr	r1, [r7, #12]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fa3c 	bl	80077da <USBD_CtlSendData>
 8007362:	e009      	b.n	8007378 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9c6 	bl	80076f8 <USBD_CtlError>
 800736c:	e004      	b.n	8007378 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa70 	bl	8007854 <USBD_CtlSendStatus>
 8007374:	e000      	b.n	8007378 <USBD_GetDescriptor+0x2cc>
    return;
 8007376:	bf00      	nop
    }
  }
}
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop

08007380 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	889b      	ldrh	r3, [r3, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d130      	bne.n	80073f4 <USBD_SetAddress+0x74>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	88db      	ldrh	r3, [r3, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d12c      	bne.n	80073f4 <USBD_SetAddress+0x74>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	885b      	ldrh	r3, [r3, #2]
 800739e:	2b7f      	cmp	r3, #127	; 0x7f
 80073a0:	d828      	bhi.n	80073f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	885b      	ldrh	r3, [r3, #2]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d104      	bne.n	80073c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f99c 	bl	80076f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c0:	e01c      	b.n	80073fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	7bfa      	ldrb	r2, [r7, #15]
 80073c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7f9 fe01 	bl	8000fd6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa3d 	bl	8007854 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e8:	e008      	b.n	80073fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f2:	e003      	b.n	80073fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f97e 	bl	80076f8 <USBD_CtlError>
  }
}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	b2da      	uxtb	r2, r3
 8007418:	4b4b      	ldr	r3, [pc, #300]	; (8007548 <USBD_SetConfig+0x144>)
 800741a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800741c:	4b4a      	ldr	r3, [pc, #296]	; (8007548 <USBD_SetConfig+0x144>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d905      	bls.n	8007430 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f966 	bl	80076f8 <USBD_CtlError>
    return USBD_FAIL;
 800742c:	2303      	movs	r3, #3
 800742e:	e087      	b.n	8007540 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007436:	2b02      	cmp	r3, #2
 8007438:	d002      	beq.n	8007440 <USBD_SetConfig+0x3c>
 800743a:	2b03      	cmp	r3, #3
 800743c:	d025      	beq.n	800748a <USBD_SetConfig+0x86>
 800743e:	e071      	b.n	8007524 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007440:	4b41      	ldr	r3, [pc, #260]	; (8007548 <USBD_SetConfig+0x144>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01c      	beq.n	8007482 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007448:	4b3f      	ldr	r3, [pc, #252]	; (8007548 <USBD_SetConfig+0x144>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007452:	4b3d      	ldr	r3, [pc, #244]	; (8007548 <USBD_SetConfig+0x144>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff f9a8 	bl	80067ae <USBD_SetClassConfig>
 800745e:	4603      	mov	r3, r0
 8007460:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d004      	beq.n	8007472 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f944 	bl	80076f8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007470:	e065      	b.n	800753e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f9ee 	bl	8007854 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2203      	movs	r2, #3
 800747c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007480:	e05d      	b.n	800753e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f9e6 	bl	8007854 <USBD_CtlSendStatus>
    break;
 8007488:	e059      	b.n	800753e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800748a:	4b2f      	ldr	r3, [pc, #188]	; (8007548 <USBD_SetConfig+0x144>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d112      	bne.n	80074b8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800749a:	4b2b      	ldr	r3, [pc, #172]	; (8007548 <USBD_SetConfig+0x144>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074a4:	4b28      	ldr	r3, [pc, #160]	; (8007548 <USBD_SetConfig+0x144>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff f99b 	bl	80067e6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f9cf 	bl	8007854 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80074b6:	e042      	b.n	800753e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80074b8:	4b23      	ldr	r3, [pc, #140]	; (8007548 <USBD_SetConfig+0x144>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d02a      	beq.n	800751c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff f989 	bl	80067e6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80074d4:	4b1c      	ldr	r3, [pc, #112]	; (8007548 <USBD_SetConfig+0x144>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80074de:	4b1a      	ldr	r3, [pc, #104]	; (8007548 <USBD_SetConfig+0x144>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff f962 	bl	80067ae <USBD_SetClassConfig>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00f      	beq.n	8007514 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f8fe 	bl	80076f8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff f96e 	bl	80067e6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2202      	movs	r2, #2
 800750e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007512:	e014      	b.n	800753e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f99d 	bl	8007854 <USBD_CtlSendStatus>
    break;
 800751a:	e010      	b.n	800753e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f999 	bl	8007854 <USBD_CtlSendStatus>
    break;
 8007522:	e00c      	b.n	800753e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f8e6 	bl	80076f8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800752c:	4b06      	ldr	r3, [pc, #24]	; (8007548 <USBD_SetConfig+0x144>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff f957 	bl	80067e6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	73fb      	strb	r3, [r7, #15]
    break;
 800753c:	bf00      	nop
  }

  return ret;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	20000144 	.word	0x20000144

0800754c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	88db      	ldrh	r3, [r3, #6]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d004      	beq.n	8007568 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f8c9 	bl	80076f8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007566:	e021      	b.n	80075ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756e:	2b01      	cmp	r3, #1
 8007570:	db17      	blt.n	80075a2 <USBD_GetConfig+0x56>
 8007572:	2b02      	cmp	r3, #2
 8007574:	dd02      	ble.n	800757c <USBD_GetConfig+0x30>
 8007576:	2b03      	cmp	r3, #3
 8007578:	d00b      	beq.n	8007592 <USBD_GetConfig+0x46>
 800757a:	e012      	b.n	80075a2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3308      	adds	r3, #8
 8007586:	2201      	movs	r2, #1
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f925 	bl	80077da <USBD_CtlSendData>
      break;
 8007590:	e00c      	b.n	80075ac <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3304      	adds	r3, #4
 8007596:	2201      	movs	r2, #1
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f91d 	bl	80077da <USBD_CtlSendData>
      break;
 80075a0:	e004      	b.n	80075ac <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f8a7 	bl	80076f8 <USBD_CtlError>
      break;
 80075aa:	bf00      	nop
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c4:	3b01      	subs	r3, #1
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d81e      	bhi.n	8007608 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d004      	beq.n	80075dc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f88f 	bl	80076f8 <USBD_CtlError>
      break;
 80075da:	e01a      	b.n	8007612 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f043 0202 	orr.w	r2, r3, #2
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	330c      	adds	r3, #12
 80075fc:	2202      	movs	r2, #2
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f8ea 	bl	80077da <USBD_CtlSendData>
    break;
 8007606:	e004      	b.n	8007612 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f874 	bl	80076f8 <USBD_CtlError>
    break;
 8007610:	bf00      	nop
  }
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	885b      	ldrh	r3, [r3, #2]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d106      	bne.n	800763a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f90d 	bl	8007854 <USBD_CtlSendStatus>
  }
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007652:	3b01      	subs	r3, #1
 8007654:	2b02      	cmp	r3, #2
 8007656:	d80b      	bhi.n	8007670 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d10c      	bne.n	800767a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f8f3 	bl	8007854 <USBD_CtlSendStatus>
      }
      break;
 800766e:	e004      	b.n	800767a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f840 	bl	80076f8 <USBD_CtlError>
      break;
 8007678:	e000      	b.n	800767c <USBD_ClrFeature+0x3a>
      break;
 800767a:	bf00      	nop
  }
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	781a      	ldrb	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff fad4 	bl	8006c5c <SWAPBYTE>
 80076b4:	4603      	mov	r3, r0
 80076b6:	461a      	mov	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3301      	adds	r3, #1
 80076c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3301      	adds	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff fac7 	bl	8006c5c <SWAPBYTE>
 80076ce:	4603      	mov	r3, r0
 80076d0:	461a      	mov	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3301      	adds	r3, #1
 80076da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7ff faba 	bl	8006c5c <SWAPBYTE>
 80076e8:	4603      	mov	r3, r0
 80076ea:	461a      	mov	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	80da      	strh	r2, [r3, #6]
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007702:	2180      	movs	r1, #128	; 0x80
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7f9 fc08 	bl	8000f1a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800770a:	2100      	movs	r1, #0
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7f9 fc04 	bl	8000f1a <USBD_LL_StallEP>
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d036      	beq.n	800779e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007734:	6938      	ldr	r0, [r7, #16]
 8007736:	f000 f836 	bl	80077a6 <USBD_GetLen>
 800773a:	4603      	mov	r3, r0
 800773c:	3301      	adds	r3, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4413      	add	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	7812      	ldrb	r2, [r2, #0]
 8007752:	701a      	strb	r2, [r3, #0]
  idx++;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	3301      	adds	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4413      	add	r3, r2
 8007760:	2203      	movs	r2, #3
 8007762:	701a      	strb	r2, [r3, #0]
  idx++;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	3301      	adds	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800776a:	e013      	b.n	8007794 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	4413      	add	r3, r2
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	7812      	ldrb	r2, [r2, #0]
 8007776:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	3301      	adds	r3, #1
 800777c:	613b      	str	r3, [r7, #16]
    idx++;
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	3301      	adds	r3, #1
 8007782:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	4413      	add	r3, r2
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
    idx++;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	3301      	adds	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e7      	bne.n	800776c <USBD_GetString+0x52>
 800779c:	e000      	b.n	80077a0 <USBD_GetString+0x86>
    return;
 800779e:	bf00      	nop
  }
}
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077b6:	e005      	b.n	80077c4 <USBD_GetLen+0x1e>
  {
    len++;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	3301      	adds	r3, #1
 80077bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f5      	bne.n	80077b8 <USBD_GetLen+0x12>
  }

  return len;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2202      	movs	r2, #2
 80077ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	2100      	movs	r1, #0
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f7f9 fc01 	bl	8001008 <USBD_LL_Transmit>

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	2100      	movs	r1, #0
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7f9 fbf0 	bl	8001008 <USBD_LL_Transmit>

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	2100      	movs	r1, #0
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7f9 fbfa 	bl	800103e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2204      	movs	r2, #4
 8007860:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007864:	2300      	movs	r3, #0
 8007866:	2200      	movs	r2, #0
 8007868:	2100      	movs	r1, #0
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7f9 fbcc 	bl	8001008 <USBD_LL_Transmit>

  return USBD_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2205      	movs	r2, #5
 8007886:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800788a:	2300      	movs	r3, #0
 800788c:	2200      	movs	r2, #0
 800788e:	2100      	movs	r1, #0
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7f9 fbd4 	bl	800103e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <__errno>:
 80078a0:	4b01      	ldr	r3, [pc, #4]	; (80078a8 <__errno+0x8>)
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	200000c0 	.word	0x200000c0

080078ac <__libc_init_array>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	4e0d      	ldr	r6, [pc, #52]	; (80078e4 <__libc_init_array+0x38>)
 80078b0:	4c0d      	ldr	r4, [pc, #52]	; (80078e8 <__libc_init_array+0x3c>)
 80078b2:	1ba4      	subs	r4, r4, r6
 80078b4:	10a4      	asrs	r4, r4, #2
 80078b6:	2500      	movs	r5, #0
 80078b8:	42a5      	cmp	r5, r4
 80078ba:	d109      	bne.n	80078d0 <__libc_init_array+0x24>
 80078bc:	4e0b      	ldr	r6, [pc, #44]	; (80078ec <__libc_init_array+0x40>)
 80078be:	4c0c      	ldr	r4, [pc, #48]	; (80078f0 <__libc_init_array+0x44>)
 80078c0:	f000 ff4e 	bl	8008760 <_init>
 80078c4:	1ba4      	subs	r4, r4, r6
 80078c6:	10a4      	asrs	r4, r4, #2
 80078c8:	2500      	movs	r5, #0
 80078ca:	42a5      	cmp	r5, r4
 80078cc:	d105      	bne.n	80078da <__libc_init_array+0x2e>
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078d4:	4798      	blx	r3
 80078d6:	3501      	adds	r5, #1
 80078d8:	e7ee      	b.n	80078b8 <__libc_init_array+0xc>
 80078da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078de:	4798      	blx	r3
 80078e0:	3501      	adds	r5, #1
 80078e2:	e7f2      	b.n	80078ca <__libc_init_array+0x1e>
 80078e4:	08008940 	.word	0x08008940
 80078e8:	08008940 	.word	0x08008940
 80078ec:	08008940 	.word	0x08008940
 80078f0:	08008944 	.word	0x08008944

080078f4 <memset>:
 80078f4:	4402      	add	r2, r0
 80078f6:	4603      	mov	r3, r0
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d100      	bne.n	80078fe <memset+0xa>
 80078fc:	4770      	bx	lr
 80078fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007902:	e7f9      	b.n	80078f8 <memset+0x4>

08007904 <iprintf>:
 8007904:	b40f      	push	{r0, r1, r2, r3}
 8007906:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <iprintf+0x2c>)
 8007908:	b513      	push	{r0, r1, r4, lr}
 800790a:	681c      	ldr	r4, [r3, #0]
 800790c:	b124      	cbz	r4, 8007918 <iprintf+0x14>
 800790e:	69a3      	ldr	r3, [r4, #24]
 8007910:	b913      	cbnz	r3, 8007918 <iprintf+0x14>
 8007912:	4620      	mov	r0, r4
 8007914:	f000 f862 	bl	80079dc <__sinit>
 8007918:	ab05      	add	r3, sp, #20
 800791a:	9a04      	ldr	r2, [sp, #16]
 800791c:	68a1      	ldr	r1, [r4, #8]
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	4620      	mov	r0, r4
 8007922:	f000 f969 	bl	8007bf8 <_vfiprintf_r>
 8007926:	b002      	add	sp, #8
 8007928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800792c:	b004      	add	sp, #16
 800792e:	4770      	bx	lr
 8007930:	200000c0 	.word	0x200000c0

08007934 <putchar>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4b08      	ldr	r3, [pc, #32]	; (8007958 <putchar+0x24>)
 8007938:	681c      	ldr	r4, [r3, #0]
 800793a:	4605      	mov	r5, r0
 800793c:	b124      	cbz	r4, 8007948 <putchar+0x14>
 800793e:	69a3      	ldr	r3, [r4, #24]
 8007940:	b913      	cbnz	r3, 8007948 <putchar+0x14>
 8007942:	4620      	mov	r0, r4
 8007944:	f000 f84a 	bl	80079dc <__sinit>
 8007948:	68a2      	ldr	r2, [r4, #8]
 800794a:	4629      	mov	r1, r5
 800794c:	4620      	mov	r0, r4
 800794e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007952:	f000 bbef 	b.w	8008134 <_putc_r>
 8007956:	bf00      	nop
 8007958:	200000c0 	.word	0x200000c0

0800795c <std>:
 800795c:	2300      	movs	r3, #0
 800795e:	b510      	push	{r4, lr}
 8007960:	4604      	mov	r4, r0
 8007962:	e9c0 3300 	strd	r3, r3, [r0]
 8007966:	6083      	str	r3, [r0, #8]
 8007968:	8181      	strh	r1, [r0, #12]
 800796a:	6643      	str	r3, [r0, #100]	; 0x64
 800796c:	81c2      	strh	r2, [r0, #14]
 800796e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007972:	6183      	str	r3, [r0, #24]
 8007974:	4619      	mov	r1, r3
 8007976:	2208      	movs	r2, #8
 8007978:	305c      	adds	r0, #92	; 0x5c
 800797a:	f7ff ffbb 	bl	80078f4 <memset>
 800797e:	4b05      	ldr	r3, [pc, #20]	; (8007994 <std+0x38>)
 8007980:	6263      	str	r3, [r4, #36]	; 0x24
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <std+0x3c>)
 8007984:	62a3      	str	r3, [r4, #40]	; 0x28
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <std+0x40>)
 8007988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <std+0x44>)
 800798c:	6224      	str	r4, [r4, #32]
 800798e:	6323      	str	r3, [r4, #48]	; 0x30
 8007990:	bd10      	pop	{r4, pc}
 8007992:	bf00      	nop
 8007994:	080081c1 	.word	0x080081c1
 8007998:	080081e3 	.word	0x080081e3
 800799c:	0800821b 	.word	0x0800821b
 80079a0:	0800823f 	.word	0x0800823f

080079a4 <_cleanup_r>:
 80079a4:	4901      	ldr	r1, [pc, #4]	; (80079ac <_cleanup_r+0x8>)
 80079a6:	f000 b885 	b.w	8007ab4 <_fwalk_reent>
 80079aa:	bf00      	nop
 80079ac:	08008519 	.word	0x08008519

080079b0 <__sfmoreglue>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	1e4a      	subs	r2, r1, #1
 80079b4:	2568      	movs	r5, #104	; 0x68
 80079b6:	4355      	muls	r5, r2
 80079b8:	460e      	mov	r6, r1
 80079ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079be:	f000 f897 	bl	8007af0 <_malloc_r>
 80079c2:	4604      	mov	r4, r0
 80079c4:	b140      	cbz	r0, 80079d8 <__sfmoreglue+0x28>
 80079c6:	2100      	movs	r1, #0
 80079c8:	e9c0 1600 	strd	r1, r6, [r0]
 80079cc:	300c      	adds	r0, #12
 80079ce:	60a0      	str	r0, [r4, #8]
 80079d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079d4:	f7ff ff8e 	bl	80078f4 <memset>
 80079d8:	4620      	mov	r0, r4
 80079da:	bd70      	pop	{r4, r5, r6, pc}

080079dc <__sinit>:
 80079dc:	6983      	ldr	r3, [r0, #24]
 80079de:	b510      	push	{r4, lr}
 80079e0:	4604      	mov	r4, r0
 80079e2:	bb33      	cbnz	r3, 8007a32 <__sinit+0x56>
 80079e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80079e8:	6503      	str	r3, [r0, #80]	; 0x50
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <__sinit+0x58>)
 80079ec:	4a12      	ldr	r2, [pc, #72]	; (8007a38 <__sinit+0x5c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6282      	str	r2, [r0, #40]	; 0x28
 80079f2:	4298      	cmp	r0, r3
 80079f4:	bf04      	itt	eq
 80079f6:	2301      	moveq	r3, #1
 80079f8:	6183      	streq	r3, [r0, #24]
 80079fa:	f000 f81f 	bl	8007a3c <__sfp>
 80079fe:	6060      	str	r0, [r4, #4]
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 f81b 	bl	8007a3c <__sfp>
 8007a06:	60a0      	str	r0, [r4, #8]
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f817 	bl	8007a3c <__sfp>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	60e0      	str	r0, [r4, #12]
 8007a12:	2104      	movs	r1, #4
 8007a14:	6860      	ldr	r0, [r4, #4]
 8007a16:	f7ff ffa1 	bl	800795c <std>
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	2109      	movs	r1, #9
 8007a1e:	68a0      	ldr	r0, [r4, #8]
 8007a20:	f7ff ff9c 	bl	800795c <std>
 8007a24:	2202      	movs	r2, #2
 8007a26:	2112      	movs	r1, #18
 8007a28:	68e0      	ldr	r0, [r4, #12]
 8007a2a:	f7ff ff97 	bl	800795c <std>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	61a3      	str	r3, [r4, #24]
 8007a32:	bd10      	pop	{r4, pc}
 8007a34:	080088a0 	.word	0x080088a0
 8007a38:	080079a5 	.word	0x080079a5

08007a3c <__sfp>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	4b1b      	ldr	r3, [pc, #108]	; (8007aac <__sfp+0x70>)
 8007a40:	681e      	ldr	r6, [r3, #0]
 8007a42:	69b3      	ldr	r3, [r6, #24]
 8007a44:	4607      	mov	r7, r0
 8007a46:	b913      	cbnz	r3, 8007a4e <__sfp+0x12>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7ff ffc7 	bl	80079dc <__sinit>
 8007a4e:	3648      	adds	r6, #72	; 0x48
 8007a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	d503      	bpl.n	8007a60 <__sfp+0x24>
 8007a58:	6833      	ldr	r3, [r6, #0]
 8007a5a:	b133      	cbz	r3, 8007a6a <__sfp+0x2e>
 8007a5c:	6836      	ldr	r6, [r6, #0]
 8007a5e:	e7f7      	b.n	8007a50 <__sfp+0x14>
 8007a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a64:	b16d      	cbz	r5, 8007a82 <__sfp+0x46>
 8007a66:	3468      	adds	r4, #104	; 0x68
 8007a68:	e7f4      	b.n	8007a54 <__sfp+0x18>
 8007a6a:	2104      	movs	r1, #4
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7ff ff9f 	bl	80079b0 <__sfmoreglue>
 8007a72:	6030      	str	r0, [r6, #0]
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d1f1      	bne.n	8007a5c <__sfp+0x20>
 8007a78:	230c      	movs	r3, #12
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4620      	mov	r0, r4
 8007a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <__sfp+0x74>)
 8007a84:	6665      	str	r5, [r4, #100]	; 0x64
 8007a86:	e9c4 5500 	strd	r5, r5, [r4]
 8007a8a:	60a5      	str	r5, [r4, #8]
 8007a8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007a90:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007a94:	2208      	movs	r2, #8
 8007a96:	4629      	mov	r1, r5
 8007a98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a9c:	f7ff ff2a 	bl	80078f4 <memset>
 8007aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007aa8:	e7e9      	b.n	8007a7e <__sfp+0x42>
 8007aaa:	bf00      	nop
 8007aac:	080088a0 	.word	0x080088a0
 8007ab0:	ffff0001 	.word	0xffff0001

08007ab4 <_fwalk_reent>:
 8007ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	4680      	mov	r8, r0
 8007aba:	4689      	mov	r9, r1
 8007abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	b914      	cbnz	r4, 8007aca <_fwalk_reent+0x16>
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007ace:	3f01      	subs	r7, #1
 8007ad0:	d501      	bpl.n	8007ad6 <_fwalk_reent+0x22>
 8007ad2:	6824      	ldr	r4, [r4, #0]
 8007ad4:	e7f5      	b.n	8007ac2 <_fwalk_reent+0xe>
 8007ad6:	89ab      	ldrh	r3, [r5, #12]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d907      	bls.n	8007aec <_fwalk_reent+0x38>
 8007adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	d003      	beq.n	8007aec <_fwalk_reent+0x38>
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	47c8      	blx	r9
 8007aea:	4306      	orrs	r6, r0
 8007aec:	3568      	adds	r5, #104	; 0x68
 8007aee:	e7ee      	b.n	8007ace <_fwalk_reent+0x1a>

08007af0 <_malloc_r>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	1ccd      	adds	r5, r1, #3
 8007af4:	f025 0503 	bic.w	r5, r5, #3
 8007af8:	3508      	adds	r5, #8
 8007afa:	2d0c      	cmp	r5, #12
 8007afc:	bf38      	it	cc
 8007afe:	250c      	movcc	r5, #12
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	4606      	mov	r6, r0
 8007b04:	db01      	blt.n	8007b0a <_malloc_r+0x1a>
 8007b06:	42a9      	cmp	r1, r5
 8007b08:	d903      	bls.n	8007b12 <_malloc_r+0x22>
 8007b0a:	230c      	movs	r3, #12
 8007b0c:	6033      	str	r3, [r6, #0]
 8007b0e:	2000      	movs	r0, #0
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
 8007b12:	f000 fda1 	bl	8008658 <__malloc_lock>
 8007b16:	4a21      	ldr	r2, [pc, #132]	; (8007b9c <_malloc_r+0xac>)
 8007b18:	6814      	ldr	r4, [r2, #0]
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	b991      	cbnz	r1, 8007b44 <_malloc_r+0x54>
 8007b1e:	4c20      	ldr	r4, [pc, #128]	; (8007ba0 <_malloc_r+0xb0>)
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	b91b      	cbnz	r3, 8007b2c <_malloc_r+0x3c>
 8007b24:	4630      	mov	r0, r6
 8007b26:	f000 fb3b 	bl	80081a0 <_sbrk_r>
 8007b2a:	6020      	str	r0, [r4, #0]
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f000 fb36 	bl	80081a0 <_sbrk_r>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d124      	bne.n	8007b82 <_malloc_r+0x92>
 8007b38:	230c      	movs	r3, #12
 8007b3a:	6033      	str	r3, [r6, #0]
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f000 fd8c 	bl	800865a <__malloc_unlock>
 8007b42:	e7e4      	b.n	8007b0e <_malloc_r+0x1e>
 8007b44:	680b      	ldr	r3, [r1, #0]
 8007b46:	1b5b      	subs	r3, r3, r5
 8007b48:	d418      	bmi.n	8007b7c <_malloc_r+0x8c>
 8007b4a:	2b0b      	cmp	r3, #11
 8007b4c:	d90f      	bls.n	8007b6e <_malloc_r+0x7e>
 8007b4e:	600b      	str	r3, [r1, #0]
 8007b50:	50cd      	str	r5, [r1, r3]
 8007b52:	18cc      	adds	r4, r1, r3
 8007b54:	4630      	mov	r0, r6
 8007b56:	f000 fd80 	bl	800865a <__malloc_unlock>
 8007b5a:	f104 000b 	add.w	r0, r4, #11
 8007b5e:	1d23      	adds	r3, r4, #4
 8007b60:	f020 0007 	bic.w	r0, r0, #7
 8007b64:	1ac3      	subs	r3, r0, r3
 8007b66:	d0d3      	beq.n	8007b10 <_malloc_r+0x20>
 8007b68:	425a      	negs	r2, r3
 8007b6a:	50e2      	str	r2, [r4, r3]
 8007b6c:	e7d0      	b.n	8007b10 <_malloc_r+0x20>
 8007b6e:	428c      	cmp	r4, r1
 8007b70:	684b      	ldr	r3, [r1, #4]
 8007b72:	bf16      	itet	ne
 8007b74:	6063      	strne	r3, [r4, #4]
 8007b76:	6013      	streq	r3, [r2, #0]
 8007b78:	460c      	movne	r4, r1
 8007b7a:	e7eb      	b.n	8007b54 <_malloc_r+0x64>
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	6849      	ldr	r1, [r1, #4]
 8007b80:	e7cc      	b.n	8007b1c <_malloc_r+0x2c>
 8007b82:	1cc4      	adds	r4, r0, #3
 8007b84:	f024 0403 	bic.w	r4, r4, #3
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d005      	beq.n	8007b98 <_malloc_r+0xa8>
 8007b8c:	1a21      	subs	r1, r4, r0
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f000 fb06 	bl	80081a0 <_sbrk_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d0cf      	beq.n	8007b38 <_malloc_r+0x48>
 8007b98:	6025      	str	r5, [r4, #0]
 8007b9a:	e7db      	b.n	8007b54 <_malloc_r+0x64>
 8007b9c:	20000148 	.word	0x20000148
 8007ba0:	2000014c 	.word	0x2000014c

08007ba4 <__sfputc_r>:
 8007ba4:	6893      	ldr	r3, [r2, #8]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	b410      	push	{r4}
 8007bac:	6093      	str	r3, [r2, #8]
 8007bae:	da08      	bge.n	8007bc2 <__sfputc_r+0x1e>
 8007bb0:	6994      	ldr	r4, [r2, #24]
 8007bb2:	42a3      	cmp	r3, r4
 8007bb4:	db01      	blt.n	8007bba <__sfputc_r+0x16>
 8007bb6:	290a      	cmp	r1, #10
 8007bb8:	d103      	bne.n	8007bc2 <__sfputc_r+0x1e>
 8007bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bbe:	f000 bb43 	b.w	8008248 <__swbuf_r>
 8007bc2:	6813      	ldr	r3, [r2, #0]
 8007bc4:	1c58      	adds	r0, r3, #1
 8007bc6:	6010      	str	r0, [r2, #0]
 8007bc8:	7019      	strb	r1, [r3, #0]
 8007bca:	4608      	mov	r0, r1
 8007bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <__sfputs_r>:
 8007bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	460f      	mov	r7, r1
 8007bd8:	4614      	mov	r4, r2
 8007bda:	18d5      	adds	r5, r2, r3
 8007bdc:	42ac      	cmp	r4, r5
 8007bde:	d101      	bne.n	8007be4 <__sfputs_r+0x12>
 8007be0:	2000      	movs	r0, #0
 8007be2:	e007      	b.n	8007bf4 <__sfputs_r+0x22>
 8007be4:	463a      	mov	r2, r7
 8007be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7ff ffda 	bl	8007ba4 <__sfputc_r>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d1f3      	bne.n	8007bdc <__sfputs_r+0xa>
 8007bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bf8 <_vfiprintf_r>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	b09d      	sub	sp, #116	; 0x74
 8007c00:	4617      	mov	r7, r2
 8007c02:	461d      	mov	r5, r3
 8007c04:	4606      	mov	r6, r0
 8007c06:	b118      	cbz	r0, 8007c10 <_vfiprintf_r+0x18>
 8007c08:	6983      	ldr	r3, [r0, #24]
 8007c0a:	b90b      	cbnz	r3, 8007c10 <_vfiprintf_r+0x18>
 8007c0c:	f7ff fee6 	bl	80079dc <__sinit>
 8007c10:	4b7c      	ldr	r3, [pc, #496]	; (8007e04 <_vfiprintf_r+0x20c>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d158      	bne.n	8007cc8 <_vfiprintf_r+0xd0>
 8007c16:	6874      	ldr	r4, [r6, #4]
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	0718      	lsls	r0, r3, #28
 8007c1c:	d55e      	bpl.n	8007cdc <_vfiprintf_r+0xe4>
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d05b      	beq.n	8007cdc <_vfiprintf_r+0xe4>
 8007c24:	2300      	movs	r3, #0
 8007c26:	9309      	str	r3, [sp, #36]	; 0x24
 8007c28:	2320      	movs	r3, #32
 8007c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c2e:	2330      	movs	r3, #48	; 0x30
 8007c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c34:	9503      	str	r5, [sp, #12]
 8007c36:	f04f 0b01 	mov.w	fp, #1
 8007c3a:	46b8      	mov	r8, r7
 8007c3c:	4645      	mov	r5, r8
 8007c3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c42:	b10b      	cbz	r3, 8007c48 <_vfiprintf_r+0x50>
 8007c44:	2b25      	cmp	r3, #37	; 0x25
 8007c46:	d154      	bne.n	8007cf2 <_vfiprintf_r+0xfa>
 8007c48:	ebb8 0a07 	subs.w	sl, r8, r7
 8007c4c:	d00b      	beq.n	8007c66 <_vfiprintf_r+0x6e>
 8007c4e:	4653      	mov	r3, sl
 8007c50:	463a      	mov	r2, r7
 8007c52:	4621      	mov	r1, r4
 8007c54:	4630      	mov	r0, r6
 8007c56:	f7ff ffbc 	bl	8007bd2 <__sfputs_r>
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	f000 80c2 	beq.w	8007de4 <_vfiprintf_r+0x1ec>
 8007c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c62:	4453      	add	r3, sl
 8007c64:	9309      	str	r3, [sp, #36]	; 0x24
 8007c66:	f898 3000 	ldrb.w	r3, [r8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 80ba 	beq.w	8007de4 <_vfiprintf_r+0x1ec>
 8007c70:	2300      	movs	r3, #0
 8007c72:	f04f 32ff 	mov.w	r2, #4294967295
 8007c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	9307      	str	r3, [sp, #28]
 8007c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c82:	931a      	str	r3, [sp, #104]	; 0x68
 8007c84:	46a8      	mov	r8, r5
 8007c86:	2205      	movs	r2, #5
 8007c88:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007c8c:	485e      	ldr	r0, [pc, #376]	; (8007e08 <_vfiprintf_r+0x210>)
 8007c8e:	f7f8 fac7 	bl	8000220 <memchr>
 8007c92:	9b04      	ldr	r3, [sp, #16]
 8007c94:	bb78      	cbnz	r0, 8007cf6 <_vfiprintf_r+0xfe>
 8007c96:	06d9      	lsls	r1, r3, #27
 8007c98:	bf44      	itt	mi
 8007c9a:	2220      	movmi	r2, #32
 8007c9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ca0:	071a      	lsls	r2, r3, #28
 8007ca2:	bf44      	itt	mi
 8007ca4:	222b      	movmi	r2, #43	; 0x2b
 8007ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007caa:	782a      	ldrb	r2, [r5, #0]
 8007cac:	2a2a      	cmp	r2, #42	; 0x2a
 8007cae:	d02a      	beq.n	8007d06 <_vfiprintf_r+0x10e>
 8007cb0:	9a07      	ldr	r2, [sp, #28]
 8007cb2:	46a8      	mov	r8, r5
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	250a      	movs	r5, #10
 8007cb8:	4641      	mov	r1, r8
 8007cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cbe:	3b30      	subs	r3, #48	; 0x30
 8007cc0:	2b09      	cmp	r3, #9
 8007cc2:	d969      	bls.n	8007d98 <_vfiprintf_r+0x1a0>
 8007cc4:	b360      	cbz	r0, 8007d20 <_vfiprintf_r+0x128>
 8007cc6:	e024      	b.n	8007d12 <_vfiprintf_r+0x11a>
 8007cc8:	4b50      	ldr	r3, [pc, #320]	; (8007e0c <_vfiprintf_r+0x214>)
 8007cca:	429c      	cmp	r4, r3
 8007ccc:	d101      	bne.n	8007cd2 <_vfiprintf_r+0xda>
 8007cce:	68b4      	ldr	r4, [r6, #8]
 8007cd0:	e7a2      	b.n	8007c18 <_vfiprintf_r+0x20>
 8007cd2:	4b4f      	ldr	r3, [pc, #316]	; (8007e10 <_vfiprintf_r+0x218>)
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	bf08      	it	eq
 8007cd8:	68f4      	ldreq	r4, [r6, #12]
 8007cda:	e79d      	b.n	8007c18 <_vfiprintf_r+0x20>
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f000 fb16 	bl	8008310 <__swsetup_r>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d09d      	beq.n	8007c24 <_vfiprintf_r+0x2c>
 8007ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cec:	b01d      	add	sp, #116	; 0x74
 8007cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf2:	46a8      	mov	r8, r5
 8007cf4:	e7a2      	b.n	8007c3c <_vfiprintf_r+0x44>
 8007cf6:	4a44      	ldr	r2, [pc, #272]	; (8007e08 <_vfiprintf_r+0x210>)
 8007cf8:	1a80      	subs	r0, r0, r2
 8007cfa:	fa0b f000 	lsl.w	r0, fp, r0
 8007cfe:	4318      	orrs	r0, r3
 8007d00:	9004      	str	r0, [sp, #16]
 8007d02:	4645      	mov	r5, r8
 8007d04:	e7be      	b.n	8007c84 <_vfiprintf_r+0x8c>
 8007d06:	9a03      	ldr	r2, [sp, #12]
 8007d08:	1d11      	adds	r1, r2, #4
 8007d0a:	6812      	ldr	r2, [r2, #0]
 8007d0c:	9103      	str	r1, [sp, #12]
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	db01      	blt.n	8007d16 <_vfiprintf_r+0x11e>
 8007d12:	9207      	str	r2, [sp, #28]
 8007d14:	e004      	b.n	8007d20 <_vfiprintf_r+0x128>
 8007d16:	4252      	negs	r2, r2
 8007d18:	f043 0302 	orr.w	r3, r3, #2
 8007d1c:	9207      	str	r2, [sp, #28]
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	f898 3000 	ldrb.w	r3, [r8]
 8007d24:	2b2e      	cmp	r3, #46	; 0x2e
 8007d26:	d10e      	bne.n	8007d46 <_vfiprintf_r+0x14e>
 8007d28:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d2e:	d138      	bne.n	8007da2 <_vfiprintf_r+0x1aa>
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	1d1a      	adds	r2, r3, #4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	9203      	str	r2, [sp, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bfb8      	it	lt
 8007d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d40:	f108 0802 	add.w	r8, r8, #2
 8007d44:	9305      	str	r3, [sp, #20]
 8007d46:	4d33      	ldr	r5, [pc, #204]	; (8007e14 <_vfiprintf_r+0x21c>)
 8007d48:	f898 1000 	ldrb.w	r1, [r8]
 8007d4c:	2203      	movs	r2, #3
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f7f8 fa66 	bl	8000220 <memchr>
 8007d54:	b140      	cbz	r0, 8007d68 <_vfiprintf_r+0x170>
 8007d56:	2340      	movs	r3, #64	; 0x40
 8007d58:	1b40      	subs	r0, r0, r5
 8007d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	4303      	orrs	r3, r0
 8007d62:	f108 0801 	add.w	r8, r8, #1
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	f898 1000 	ldrb.w	r1, [r8]
 8007d6c:	482a      	ldr	r0, [pc, #168]	; (8007e18 <_vfiprintf_r+0x220>)
 8007d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d72:	2206      	movs	r2, #6
 8007d74:	f108 0701 	add.w	r7, r8, #1
 8007d78:	f7f8 fa52 	bl	8000220 <memchr>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d037      	beq.n	8007df0 <_vfiprintf_r+0x1f8>
 8007d80:	4b26      	ldr	r3, [pc, #152]	; (8007e1c <_vfiprintf_r+0x224>)
 8007d82:	bb1b      	cbnz	r3, 8007dcc <_vfiprintf_r+0x1d4>
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	3307      	adds	r3, #7
 8007d88:	f023 0307 	bic.w	r3, r3, #7
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	9303      	str	r3, [sp, #12]
 8007d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d92:	444b      	add	r3, r9
 8007d94:	9309      	str	r3, [sp, #36]	; 0x24
 8007d96:	e750      	b.n	8007c3a <_vfiprintf_r+0x42>
 8007d98:	fb05 3202 	mla	r2, r5, r2, r3
 8007d9c:	2001      	movs	r0, #1
 8007d9e:	4688      	mov	r8, r1
 8007da0:	e78a      	b.n	8007cb8 <_vfiprintf_r+0xc0>
 8007da2:	2300      	movs	r3, #0
 8007da4:	f108 0801 	add.w	r8, r8, #1
 8007da8:	9305      	str	r3, [sp, #20]
 8007daa:	4619      	mov	r1, r3
 8007dac:	250a      	movs	r5, #10
 8007dae:	4640      	mov	r0, r8
 8007db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007db4:	3a30      	subs	r2, #48	; 0x30
 8007db6:	2a09      	cmp	r2, #9
 8007db8:	d903      	bls.n	8007dc2 <_vfiprintf_r+0x1ca>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0c3      	beq.n	8007d46 <_vfiprintf_r+0x14e>
 8007dbe:	9105      	str	r1, [sp, #20]
 8007dc0:	e7c1      	b.n	8007d46 <_vfiprintf_r+0x14e>
 8007dc2:	fb05 2101 	mla	r1, r5, r1, r2
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	4680      	mov	r8, r0
 8007dca:	e7f0      	b.n	8007dae <_vfiprintf_r+0x1b6>
 8007dcc:	ab03      	add	r3, sp, #12
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	4622      	mov	r2, r4
 8007dd2:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <_vfiprintf_r+0x228>)
 8007dd4:	a904      	add	r1, sp, #16
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f3af 8000 	nop.w
 8007ddc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007de0:	4681      	mov	r9, r0
 8007de2:	d1d5      	bne.n	8007d90 <_vfiprintf_r+0x198>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	065b      	lsls	r3, r3, #25
 8007de8:	f53f af7e 	bmi.w	8007ce8 <_vfiprintf_r+0xf0>
 8007dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dee:	e77d      	b.n	8007cec <_vfiprintf_r+0xf4>
 8007df0:	ab03      	add	r3, sp, #12
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	4622      	mov	r2, r4
 8007df6:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <_vfiprintf_r+0x228>)
 8007df8:	a904      	add	r1, sp, #16
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 f888 	bl	8007f10 <_printf_i>
 8007e00:	e7ec      	b.n	8007ddc <_vfiprintf_r+0x1e4>
 8007e02:	bf00      	nop
 8007e04:	080088c4 	.word	0x080088c4
 8007e08:	08008904 	.word	0x08008904
 8007e0c:	080088e4 	.word	0x080088e4
 8007e10:	080088a4 	.word	0x080088a4
 8007e14:	0800890a 	.word	0x0800890a
 8007e18:	0800890e 	.word	0x0800890e
 8007e1c:	00000000 	.word	0x00000000
 8007e20:	08007bd3 	.word	0x08007bd3

08007e24 <_printf_common>:
 8007e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e28:	4691      	mov	r9, r2
 8007e2a:	461f      	mov	r7, r3
 8007e2c:	688a      	ldr	r2, [r1, #8]
 8007e2e:	690b      	ldr	r3, [r1, #16]
 8007e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e34:	4293      	cmp	r3, r2
 8007e36:	bfb8      	it	lt
 8007e38:	4613      	movlt	r3, r2
 8007e3a:	f8c9 3000 	str.w	r3, [r9]
 8007e3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e42:	4606      	mov	r6, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	b112      	cbz	r2, 8007e4e <_printf_common+0x2a>
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f8c9 3000 	str.w	r3, [r9]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	0699      	lsls	r1, r3, #26
 8007e52:	bf42      	ittt	mi
 8007e54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e58:	3302      	addmi	r3, #2
 8007e5a:	f8c9 3000 	strmi.w	r3, [r9]
 8007e5e:	6825      	ldr	r5, [r4, #0]
 8007e60:	f015 0506 	ands.w	r5, r5, #6
 8007e64:	d107      	bne.n	8007e76 <_printf_common+0x52>
 8007e66:	f104 0a19 	add.w	sl, r4, #25
 8007e6a:	68e3      	ldr	r3, [r4, #12]
 8007e6c:	f8d9 2000 	ldr.w	r2, [r9]
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	42ab      	cmp	r3, r5
 8007e74:	dc28      	bgt.n	8007ec8 <_printf_common+0xa4>
 8007e76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e7a:	6822      	ldr	r2, [r4, #0]
 8007e7c:	3300      	adds	r3, #0
 8007e7e:	bf18      	it	ne
 8007e80:	2301      	movne	r3, #1
 8007e82:	0692      	lsls	r2, r2, #26
 8007e84:	d42d      	bmi.n	8007ee2 <_printf_common+0xbe>
 8007e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e8a:	4639      	mov	r1, r7
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	47c0      	blx	r8
 8007e90:	3001      	adds	r0, #1
 8007e92:	d020      	beq.n	8007ed6 <_printf_common+0xb2>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	68e5      	ldr	r5, [r4, #12]
 8007e98:	f8d9 2000 	ldr.w	r2, [r9]
 8007e9c:	f003 0306 	and.w	r3, r3, #6
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	bf08      	it	eq
 8007ea4:	1aad      	subeq	r5, r5, r2
 8007ea6:	68a3      	ldr	r3, [r4, #8]
 8007ea8:	6922      	ldr	r2, [r4, #16]
 8007eaa:	bf0c      	ite	eq
 8007eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eb0:	2500      	movne	r5, #0
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	bfc4      	itt	gt
 8007eb6:	1a9b      	subgt	r3, r3, r2
 8007eb8:	18ed      	addgt	r5, r5, r3
 8007eba:	f04f 0900 	mov.w	r9, #0
 8007ebe:	341a      	adds	r4, #26
 8007ec0:	454d      	cmp	r5, r9
 8007ec2:	d11a      	bne.n	8007efa <_printf_common+0xd6>
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	e008      	b.n	8007eda <_printf_common+0xb6>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	4652      	mov	r2, sl
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4630      	mov	r0, r6
 8007ed0:	47c0      	blx	r8
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d103      	bne.n	8007ede <_printf_common+0xba>
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	3501      	adds	r5, #1
 8007ee0:	e7c3      	b.n	8007e6a <_printf_common+0x46>
 8007ee2:	18e1      	adds	r1, r4, r3
 8007ee4:	1c5a      	adds	r2, r3, #1
 8007ee6:	2030      	movs	r0, #48	; 0x30
 8007ee8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eec:	4422      	add	r2, r4
 8007eee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ef2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	e7c5      	b.n	8007e86 <_printf_common+0x62>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4622      	mov	r2, r4
 8007efe:	4639      	mov	r1, r7
 8007f00:	4630      	mov	r0, r6
 8007f02:	47c0      	blx	r8
 8007f04:	3001      	adds	r0, #1
 8007f06:	d0e6      	beq.n	8007ed6 <_printf_common+0xb2>
 8007f08:	f109 0901 	add.w	r9, r9, #1
 8007f0c:	e7d8      	b.n	8007ec0 <_printf_common+0x9c>
	...

08007f10 <_printf_i>:
 8007f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f18:	460c      	mov	r4, r1
 8007f1a:	7e09      	ldrb	r1, [r1, #24]
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	296e      	cmp	r1, #110	; 0x6e
 8007f20:	4617      	mov	r7, r2
 8007f22:	4606      	mov	r6, r0
 8007f24:	4698      	mov	r8, r3
 8007f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f28:	f000 80b3 	beq.w	8008092 <_printf_i+0x182>
 8007f2c:	d822      	bhi.n	8007f74 <_printf_i+0x64>
 8007f2e:	2963      	cmp	r1, #99	; 0x63
 8007f30:	d036      	beq.n	8007fa0 <_printf_i+0x90>
 8007f32:	d80a      	bhi.n	8007f4a <_printf_i+0x3a>
 8007f34:	2900      	cmp	r1, #0
 8007f36:	f000 80b9 	beq.w	80080ac <_printf_i+0x19c>
 8007f3a:	2958      	cmp	r1, #88	; 0x58
 8007f3c:	f000 8083 	beq.w	8008046 <_printf_i+0x136>
 8007f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f48:	e032      	b.n	8007fb0 <_printf_i+0xa0>
 8007f4a:	2964      	cmp	r1, #100	; 0x64
 8007f4c:	d001      	beq.n	8007f52 <_printf_i+0x42>
 8007f4e:	2969      	cmp	r1, #105	; 0x69
 8007f50:	d1f6      	bne.n	8007f40 <_printf_i+0x30>
 8007f52:	6820      	ldr	r0, [r4, #0]
 8007f54:	6813      	ldr	r3, [r2, #0]
 8007f56:	0605      	lsls	r5, r0, #24
 8007f58:	f103 0104 	add.w	r1, r3, #4
 8007f5c:	d52a      	bpl.n	8007fb4 <_printf_i+0xa4>
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6011      	str	r1, [r2, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da03      	bge.n	8007f6e <_printf_i+0x5e>
 8007f66:	222d      	movs	r2, #45	; 0x2d
 8007f68:	425b      	negs	r3, r3
 8007f6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f6e:	486f      	ldr	r0, [pc, #444]	; (800812c <_printf_i+0x21c>)
 8007f70:	220a      	movs	r2, #10
 8007f72:	e039      	b.n	8007fe8 <_printf_i+0xd8>
 8007f74:	2973      	cmp	r1, #115	; 0x73
 8007f76:	f000 809d 	beq.w	80080b4 <_printf_i+0x1a4>
 8007f7a:	d808      	bhi.n	8007f8e <_printf_i+0x7e>
 8007f7c:	296f      	cmp	r1, #111	; 0x6f
 8007f7e:	d020      	beq.n	8007fc2 <_printf_i+0xb2>
 8007f80:	2970      	cmp	r1, #112	; 0x70
 8007f82:	d1dd      	bne.n	8007f40 <_printf_i+0x30>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	f043 0320 	orr.w	r3, r3, #32
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	e003      	b.n	8007f96 <_printf_i+0x86>
 8007f8e:	2975      	cmp	r1, #117	; 0x75
 8007f90:	d017      	beq.n	8007fc2 <_printf_i+0xb2>
 8007f92:	2978      	cmp	r1, #120	; 0x78
 8007f94:	d1d4      	bne.n	8007f40 <_printf_i+0x30>
 8007f96:	2378      	movs	r3, #120	; 0x78
 8007f98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f9c:	4864      	ldr	r0, [pc, #400]	; (8008130 <_printf_i+0x220>)
 8007f9e:	e055      	b.n	800804c <_printf_i+0x13c>
 8007fa0:	6813      	ldr	r3, [r2, #0]
 8007fa2:	1d19      	adds	r1, r3, #4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6011      	str	r1, [r2, #0]
 8007fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e08c      	b.n	80080ce <_printf_i+0x1be>
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6011      	str	r1, [r2, #0]
 8007fb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fbc:	bf18      	it	ne
 8007fbe:	b21b      	sxthne	r3, r3
 8007fc0:	e7cf      	b.n	8007f62 <_printf_i+0x52>
 8007fc2:	6813      	ldr	r3, [r2, #0]
 8007fc4:	6825      	ldr	r5, [r4, #0]
 8007fc6:	1d18      	adds	r0, r3, #4
 8007fc8:	6010      	str	r0, [r2, #0]
 8007fca:	0628      	lsls	r0, r5, #24
 8007fcc:	d501      	bpl.n	8007fd2 <_printf_i+0xc2>
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	e002      	b.n	8007fd8 <_printf_i+0xc8>
 8007fd2:	0668      	lsls	r0, r5, #25
 8007fd4:	d5fb      	bpl.n	8007fce <_printf_i+0xbe>
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	4854      	ldr	r0, [pc, #336]	; (800812c <_printf_i+0x21c>)
 8007fda:	296f      	cmp	r1, #111	; 0x6f
 8007fdc:	bf14      	ite	ne
 8007fde:	220a      	movne	r2, #10
 8007fe0:	2208      	moveq	r2, #8
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fe8:	6865      	ldr	r5, [r4, #4]
 8007fea:	60a5      	str	r5, [r4, #8]
 8007fec:	2d00      	cmp	r5, #0
 8007fee:	f2c0 8095 	blt.w	800811c <_printf_i+0x20c>
 8007ff2:	6821      	ldr	r1, [r4, #0]
 8007ff4:	f021 0104 	bic.w	r1, r1, #4
 8007ff8:	6021      	str	r1, [r4, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d13d      	bne.n	800807a <_printf_i+0x16a>
 8007ffe:	2d00      	cmp	r5, #0
 8008000:	f040 808e 	bne.w	8008120 <_printf_i+0x210>
 8008004:	4665      	mov	r5, ip
 8008006:	2a08      	cmp	r2, #8
 8008008:	d10b      	bne.n	8008022 <_printf_i+0x112>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	07db      	lsls	r3, r3, #31
 800800e:	d508      	bpl.n	8008022 <_printf_i+0x112>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	6862      	ldr	r2, [r4, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	bfde      	ittt	le
 8008018:	2330      	movle	r3, #48	; 0x30
 800801a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800801e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008022:	ebac 0305 	sub.w	r3, ip, r5
 8008026:	6123      	str	r3, [r4, #16]
 8008028:	f8cd 8000 	str.w	r8, [sp]
 800802c:	463b      	mov	r3, r7
 800802e:	aa03      	add	r2, sp, #12
 8008030:	4621      	mov	r1, r4
 8008032:	4630      	mov	r0, r6
 8008034:	f7ff fef6 	bl	8007e24 <_printf_common>
 8008038:	3001      	adds	r0, #1
 800803a:	d14d      	bne.n	80080d8 <_printf_i+0x1c8>
 800803c:	f04f 30ff 	mov.w	r0, #4294967295
 8008040:	b005      	add	sp, #20
 8008042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008046:	4839      	ldr	r0, [pc, #228]	; (800812c <_printf_i+0x21c>)
 8008048:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800804c:	6813      	ldr	r3, [r2, #0]
 800804e:	6821      	ldr	r1, [r4, #0]
 8008050:	1d1d      	adds	r5, r3, #4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6015      	str	r5, [r2, #0]
 8008056:	060a      	lsls	r2, r1, #24
 8008058:	d50b      	bpl.n	8008072 <_printf_i+0x162>
 800805a:	07ca      	lsls	r2, r1, #31
 800805c:	bf44      	itt	mi
 800805e:	f041 0120 	orrmi.w	r1, r1, #32
 8008062:	6021      	strmi	r1, [r4, #0]
 8008064:	b91b      	cbnz	r3, 800806e <_printf_i+0x15e>
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	f022 0220 	bic.w	r2, r2, #32
 800806c:	6022      	str	r2, [r4, #0]
 800806e:	2210      	movs	r2, #16
 8008070:	e7b7      	b.n	8007fe2 <_printf_i+0xd2>
 8008072:	064d      	lsls	r5, r1, #25
 8008074:	bf48      	it	mi
 8008076:	b29b      	uxthmi	r3, r3
 8008078:	e7ef      	b.n	800805a <_printf_i+0x14a>
 800807a:	4665      	mov	r5, ip
 800807c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008080:	fb02 3311 	mls	r3, r2, r1, r3
 8008084:	5cc3      	ldrb	r3, [r0, r3]
 8008086:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800808a:	460b      	mov	r3, r1
 800808c:	2900      	cmp	r1, #0
 800808e:	d1f5      	bne.n	800807c <_printf_i+0x16c>
 8008090:	e7b9      	b.n	8008006 <_printf_i+0xf6>
 8008092:	6813      	ldr	r3, [r2, #0]
 8008094:	6825      	ldr	r5, [r4, #0]
 8008096:	6961      	ldr	r1, [r4, #20]
 8008098:	1d18      	adds	r0, r3, #4
 800809a:	6010      	str	r0, [r2, #0]
 800809c:	0628      	lsls	r0, r5, #24
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	d501      	bpl.n	80080a6 <_printf_i+0x196>
 80080a2:	6019      	str	r1, [r3, #0]
 80080a4:	e002      	b.n	80080ac <_printf_i+0x19c>
 80080a6:	066a      	lsls	r2, r5, #25
 80080a8:	d5fb      	bpl.n	80080a2 <_printf_i+0x192>
 80080aa:	8019      	strh	r1, [r3, #0]
 80080ac:	2300      	movs	r3, #0
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	4665      	mov	r5, ip
 80080b2:	e7b9      	b.n	8008028 <_printf_i+0x118>
 80080b4:	6813      	ldr	r3, [r2, #0]
 80080b6:	1d19      	adds	r1, r3, #4
 80080b8:	6011      	str	r1, [r2, #0]
 80080ba:	681d      	ldr	r5, [r3, #0]
 80080bc:	6862      	ldr	r2, [r4, #4]
 80080be:	2100      	movs	r1, #0
 80080c0:	4628      	mov	r0, r5
 80080c2:	f7f8 f8ad 	bl	8000220 <memchr>
 80080c6:	b108      	cbz	r0, 80080cc <_printf_i+0x1bc>
 80080c8:	1b40      	subs	r0, r0, r5
 80080ca:	6060      	str	r0, [r4, #4]
 80080cc:	6863      	ldr	r3, [r4, #4]
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	2300      	movs	r3, #0
 80080d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d6:	e7a7      	b.n	8008028 <_printf_i+0x118>
 80080d8:	6923      	ldr	r3, [r4, #16]
 80080da:	462a      	mov	r2, r5
 80080dc:	4639      	mov	r1, r7
 80080de:	4630      	mov	r0, r6
 80080e0:	47c0      	blx	r8
 80080e2:	3001      	adds	r0, #1
 80080e4:	d0aa      	beq.n	800803c <_printf_i+0x12c>
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	079b      	lsls	r3, r3, #30
 80080ea:	d413      	bmi.n	8008114 <_printf_i+0x204>
 80080ec:	68e0      	ldr	r0, [r4, #12]
 80080ee:	9b03      	ldr	r3, [sp, #12]
 80080f0:	4298      	cmp	r0, r3
 80080f2:	bfb8      	it	lt
 80080f4:	4618      	movlt	r0, r3
 80080f6:	e7a3      	b.n	8008040 <_printf_i+0x130>
 80080f8:	2301      	movs	r3, #1
 80080fa:	464a      	mov	r2, r9
 80080fc:	4639      	mov	r1, r7
 80080fe:	4630      	mov	r0, r6
 8008100:	47c0      	blx	r8
 8008102:	3001      	adds	r0, #1
 8008104:	d09a      	beq.n	800803c <_printf_i+0x12c>
 8008106:	3501      	adds	r5, #1
 8008108:	68e3      	ldr	r3, [r4, #12]
 800810a:	9a03      	ldr	r2, [sp, #12]
 800810c:	1a9b      	subs	r3, r3, r2
 800810e:	42ab      	cmp	r3, r5
 8008110:	dcf2      	bgt.n	80080f8 <_printf_i+0x1e8>
 8008112:	e7eb      	b.n	80080ec <_printf_i+0x1dc>
 8008114:	2500      	movs	r5, #0
 8008116:	f104 0919 	add.w	r9, r4, #25
 800811a:	e7f5      	b.n	8008108 <_printf_i+0x1f8>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1ac      	bne.n	800807a <_printf_i+0x16a>
 8008120:	7803      	ldrb	r3, [r0, #0]
 8008122:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008126:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800812a:	e76c      	b.n	8008006 <_printf_i+0xf6>
 800812c:	08008915 	.word	0x08008915
 8008130:	08008926 	.word	0x08008926

08008134 <_putc_r>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	460d      	mov	r5, r1
 8008138:	4614      	mov	r4, r2
 800813a:	4606      	mov	r6, r0
 800813c:	b118      	cbz	r0, 8008146 <_putc_r+0x12>
 800813e:	6983      	ldr	r3, [r0, #24]
 8008140:	b90b      	cbnz	r3, 8008146 <_putc_r+0x12>
 8008142:	f7ff fc4b 	bl	80079dc <__sinit>
 8008146:	4b13      	ldr	r3, [pc, #76]	; (8008194 <_putc_r+0x60>)
 8008148:	429c      	cmp	r4, r3
 800814a:	d112      	bne.n	8008172 <_putc_r+0x3e>
 800814c:	6874      	ldr	r4, [r6, #4]
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	3b01      	subs	r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	da16      	bge.n	8008186 <_putc_r+0x52>
 8008158:	69a2      	ldr	r2, [r4, #24]
 800815a:	4293      	cmp	r3, r2
 800815c:	db02      	blt.n	8008164 <_putc_r+0x30>
 800815e:	b2eb      	uxtb	r3, r5
 8008160:	2b0a      	cmp	r3, #10
 8008162:	d110      	bne.n	8008186 <_putc_r+0x52>
 8008164:	4622      	mov	r2, r4
 8008166:	4629      	mov	r1, r5
 8008168:	4630      	mov	r0, r6
 800816a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800816e:	f000 b86b 	b.w	8008248 <__swbuf_r>
 8008172:	4b09      	ldr	r3, [pc, #36]	; (8008198 <_putc_r+0x64>)
 8008174:	429c      	cmp	r4, r3
 8008176:	d101      	bne.n	800817c <_putc_r+0x48>
 8008178:	68b4      	ldr	r4, [r6, #8]
 800817a:	e7e8      	b.n	800814e <_putc_r+0x1a>
 800817c:	4b07      	ldr	r3, [pc, #28]	; (800819c <_putc_r+0x68>)
 800817e:	429c      	cmp	r4, r3
 8008180:	bf08      	it	eq
 8008182:	68f4      	ldreq	r4, [r6, #12]
 8008184:	e7e3      	b.n	800814e <_putc_r+0x1a>
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	6022      	str	r2, [r4, #0]
 800818c:	701d      	strb	r5, [r3, #0]
 800818e:	b2e8      	uxtb	r0, r5
 8008190:	bd70      	pop	{r4, r5, r6, pc}
 8008192:	bf00      	nop
 8008194:	080088c4 	.word	0x080088c4
 8008198:	080088e4 	.word	0x080088e4
 800819c:	080088a4 	.word	0x080088a4

080081a0 <_sbrk_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4c06      	ldr	r4, [pc, #24]	; (80081bc <_sbrk_r+0x1c>)
 80081a4:	2300      	movs	r3, #0
 80081a6:	4605      	mov	r5, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	f7f8 fdf0 	bl	8000d90 <_sbrk>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_sbrk_r+0x1a>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_sbrk_r+0x1a>
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	20000a48 	.word	0x20000a48

080081c0 <__sread>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	460c      	mov	r4, r1
 80081c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c8:	f000 fa96 	bl	80086f8 <_read_r>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	bfab      	itete	ge
 80081d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081d2:	89a3      	ldrhlt	r3, [r4, #12]
 80081d4:	181b      	addge	r3, r3, r0
 80081d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081da:	bfac      	ite	ge
 80081dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80081de:	81a3      	strhlt	r3, [r4, #12]
 80081e0:	bd10      	pop	{r4, pc}

080081e2 <__swrite>:
 80081e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e6:	461f      	mov	r7, r3
 80081e8:	898b      	ldrh	r3, [r1, #12]
 80081ea:	05db      	lsls	r3, r3, #23
 80081ec:	4605      	mov	r5, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	4616      	mov	r6, r2
 80081f2:	d505      	bpl.n	8008200 <__swrite+0x1e>
 80081f4:	2302      	movs	r3, #2
 80081f6:	2200      	movs	r2, #0
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	f000 f9b6 	bl	800856c <_lseek_r>
 8008200:	89a3      	ldrh	r3, [r4, #12]
 8008202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800820a:	81a3      	strh	r3, [r4, #12]
 800820c:	4632      	mov	r2, r6
 800820e:	463b      	mov	r3, r7
 8008210:	4628      	mov	r0, r5
 8008212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008216:	f000 b869 	b.w	80082ec <_write_r>

0800821a <__sseek>:
 800821a:	b510      	push	{r4, lr}
 800821c:	460c      	mov	r4, r1
 800821e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008222:	f000 f9a3 	bl	800856c <_lseek_r>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	bf15      	itete	ne
 800822c:	6560      	strne	r0, [r4, #84]	; 0x54
 800822e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008236:	81a3      	strheq	r3, [r4, #12]
 8008238:	bf18      	it	ne
 800823a:	81a3      	strhne	r3, [r4, #12]
 800823c:	bd10      	pop	{r4, pc}

0800823e <__sclose>:
 800823e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008242:	f000 b8d3 	b.w	80083ec <_close_r>
	...

08008248 <__swbuf_r>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	460e      	mov	r6, r1
 800824c:	4614      	mov	r4, r2
 800824e:	4605      	mov	r5, r0
 8008250:	b118      	cbz	r0, 800825a <__swbuf_r+0x12>
 8008252:	6983      	ldr	r3, [r0, #24]
 8008254:	b90b      	cbnz	r3, 800825a <__swbuf_r+0x12>
 8008256:	f7ff fbc1 	bl	80079dc <__sinit>
 800825a:	4b21      	ldr	r3, [pc, #132]	; (80082e0 <__swbuf_r+0x98>)
 800825c:	429c      	cmp	r4, r3
 800825e:	d12a      	bne.n	80082b6 <__swbuf_r+0x6e>
 8008260:	686c      	ldr	r4, [r5, #4]
 8008262:	69a3      	ldr	r3, [r4, #24]
 8008264:	60a3      	str	r3, [r4, #8]
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	071a      	lsls	r2, r3, #28
 800826a:	d52e      	bpl.n	80082ca <__swbuf_r+0x82>
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	b363      	cbz	r3, 80082ca <__swbuf_r+0x82>
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	6820      	ldr	r0, [r4, #0]
 8008274:	1ac0      	subs	r0, r0, r3
 8008276:	6963      	ldr	r3, [r4, #20]
 8008278:	b2f6      	uxtb	r6, r6
 800827a:	4283      	cmp	r3, r0
 800827c:	4637      	mov	r7, r6
 800827e:	dc04      	bgt.n	800828a <__swbuf_r+0x42>
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	f000 f948 	bl	8008518 <_fflush_r>
 8008288:	bb28      	cbnz	r0, 80082d6 <__swbuf_r+0x8e>
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	3b01      	subs	r3, #1
 800828e:	60a3      	str	r3, [r4, #8]
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	701e      	strb	r6, [r3, #0]
 8008298:	6963      	ldr	r3, [r4, #20]
 800829a:	3001      	adds	r0, #1
 800829c:	4283      	cmp	r3, r0
 800829e:	d004      	beq.n	80082aa <__swbuf_r+0x62>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	07db      	lsls	r3, r3, #31
 80082a4:	d519      	bpl.n	80082da <__swbuf_r+0x92>
 80082a6:	2e0a      	cmp	r6, #10
 80082a8:	d117      	bne.n	80082da <__swbuf_r+0x92>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 f933 	bl	8008518 <_fflush_r>
 80082b2:	b190      	cbz	r0, 80082da <__swbuf_r+0x92>
 80082b4:	e00f      	b.n	80082d6 <__swbuf_r+0x8e>
 80082b6:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <__swbuf_r+0x9c>)
 80082b8:	429c      	cmp	r4, r3
 80082ba:	d101      	bne.n	80082c0 <__swbuf_r+0x78>
 80082bc:	68ac      	ldr	r4, [r5, #8]
 80082be:	e7d0      	b.n	8008262 <__swbuf_r+0x1a>
 80082c0:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <__swbuf_r+0xa0>)
 80082c2:	429c      	cmp	r4, r3
 80082c4:	bf08      	it	eq
 80082c6:	68ec      	ldreq	r4, [r5, #12]
 80082c8:	e7cb      	b.n	8008262 <__swbuf_r+0x1a>
 80082ca:	4621      	mov	r1, r4
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 f81f 	bl	8008310 <__swsetup_r>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d0cc      	beq.n	8008270 <__swbuf_r+0x28>
 80082d6:	f04f 37ff 	mov.w	r7, #4294967295
 80082da:	4638      	mov	r0, r7
 80082dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082de:	bf00      	nop
 80082e0:	080088c4 	.word	0x080088c4
 80082e4:	080088e4 	.word	0x080088e4
 80082e8:	080088a4 	.word	0x080088a4

080082ec <_write_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4c07      	ldr	r4, [pc, #28]	; (800830c <_write_r+0x20>)
 80082f0:	4605      	mov	r5, r0
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	2200      	movs	r2, #0
 80082f8:	6022      	str	r2, [r4, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f7f8 fcf7 	bl	8000cee <_write>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_write_r+0x1e>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	b103      	cbz	r3, 800830a <_write_r+0x1e>
 8008308:	602b      	str	r3, [r5, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	20000a48 	.word	0x20000a48

08008310 <__swsetup_r>:
 8008310:	4b32      	ldr	r3, [pc, #200]	; (80083dc <__swsetup_r+0xcc>)
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	681d      	ldr	r5, [r3, #0]
 8008316:	4606      	mov	r6, r0
 8008318:	460c      	mov	r4, r1
 800831a:	b125      	cbz	r5, 8008326 <__swsetup_r+0x16>
 800831c:	69ab      	ldr	r3, [r5, #24]
 800831e:	b913      	cbnz	r3, 8008326 <__swsetup_r+0x16>
 8008320:	4628      	mov	r0, r5
 8008322:	f7ff fb5b 	bl	80079dc <__sinit>
 8008326:	4b2e      	ldr	r3, [pc, #184]	; (80083e0 <__swsetup_r+0xd0>)
 8008328:	429c      	cmp	r4, r3
 800832a:	d10f      	bne.n	800834c <__swsetup_r+0x3c>
 800832c:	686c      	ldr	r4, [r5, #4]
 800832e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008332:	b29a      	uxth	r2, r3
 8008334:	0715      	lsls	r5, r2, #28
 8008336:	d42c      	bmi.n	8008392 <__swsetup_r+0x82>
 8008338:	06d0      	lsls	r0, r2, #27
 800833a:	d411      	bmi.n	8008360 <__swsetup_r+0x50>
 800833c:	2209      	movs	r2, #9
 800833e:	6032      	str	r2, [r6, #0]
 8008340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008344:	81a3      	strh	r3, [r4, #12]
 8008346:	f04f 30ff 	mov.w	r0, #4294967295
 800834a:	e03e      	b.n	80083ca <__swsetup_r+0xba>
 800834c:	4b25      	ldr	r3, [pc, #148]	; (80083e4 <__swsetup_r+0xd4>)
 800834e:	429c      	cmp	r4, r3
 8008350:	d101      	bne.n	8008356 <__swsetup_r+0x46>
 8008352:	68ac      	ldr	r4, [r5, #8]
 8008354:	e7eb      	b.n	800832e <__swsetup_r+0x1e>
 8008356:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <__swsetup_r+0xd8>)
 8008358:	429c      	cmp	r4, r3
 800835a:	bf08      	it	eq
 800835c:	68ec      	ldreq	r4, [r5, #12]
 800835e:	e7e6      	b.n	800832e <__swsetup_r+0x1e>
 8008360:	0751      	lsls	r1, r2, #29
 8008362:	d512      	bpl.n	800838a <__swsetup_r+0x7a>
 8008364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008366:	b141      	cbz	r1, 800837a <__swsetup_r+0x6a>
 8008368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800836c:	4299      	cmp	r1, r3
 800836e:	d002      	beq.n	8008376 <__swsetup_r+0x66>
 8008370:	4630      	mov	r0, r6
 8008372:	f000 f973 	bl	800865c <_free_r>
 8008376:	2300      	movs	r3, #0
 8008378:	6363      	str	r3, [r4, #52]	; 0x34
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008380:	81a3      	strh	r3, [r4, #12]
 8008382:	2300      	movs	r3, #0
 8008384:	6063      	str	r3, [r4, #4]
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	f043 0308 	orr.w	r3, r3, #8
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	6923      	ldr	r3, [r4, #16]
 8008394:	b94b      	cbnz	r3, 80083aa <__swsetup_r+0x9a>
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800839c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a0:	d003      	beq.n	80083aa <__swsetup_r+0x9a>
 80083a2:	4621      	mov	r1, r4
 80083a4:	4630      	mov	r0, r6
 80083a6:	f000 f917 	bl	80085d8 <__smakebuf_r>
 80083aa:	89a2      	ldrh	r2, [r4, #12]
 80083ac:	f012 0301 	ands.w	r3, r2, #1
 80083b0:	d00c      	beq.n	80083cc <__swsetup_r+0xbc>
 80083b2:	2300      	movs	r3, #0
 80083b4:	60a3      	str	r3, [r4, #8]
 80083b6:	6963      	ldr	r3, [r4, #20]
 80083b8:	425b      	negs	r3, r3
 80083ba:	61a3      	str	r3, [r4, #24]
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	b953      	cbnz	r3, 80083d6 <__swsetup_r+0xc6>
 80083c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80083c8:	d1ba      	bne.n	8008340 <__swsetup_r+0x30>
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	0792      	lsls	r2, r2, #30
 80083ce:	bf58      	it	pl
 80083d0:	6963      	ldrpl	r3, [r4, #20]
 80083d2:	60a3      	str	r3, [r4, #8]
 80083d4:	e7f2      	b.n	80083bc <__swsetup_r+0xac>
 80083d6:	2000      	movs	r0, #0
 80083d8:	e7f7      	b.n	80083ca <__swsetup_r+0xba>
 80083da:	bf00      	nop
 80083dc:	200000c0 	.word	0x200000c0
 80083e0:	080088c4 	.word	0x080088c4
 80083e4:	080088e4 	.word	0x080088e4
 80083e8:	080088a4 	.word	0x080088a4

080083ec <_close_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4c06      	ldr	r4, [pc, #24]	; (8008408 <_close_r+0x1c>)
 80083f0:	2300      	movs	r3, #0
 80083f2:	4605      	mov	r5, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	f7f8 fc95 	bl	8000d26 <_close>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_close_r+0x1a>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	b103      	cbz	r3, 8008406 <_close_r+0x1a>
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	20000a48 	.word	0x20000a48

0800840c <__sflush_r>:
 800840c:	898a      	ldrh	r2, [r1, #12]
 800840e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008412:	4605      	mov	r5, r0
 8008414:	0710      	lsls	r0, r2, #28
 8008416:	460c      	mov	r4, r1
 8008418:	d458      	bmi.n	80084cc <__sflush_r+0xc0>
 800841a:	684b      	ldr	r3, [r1, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	dc05      	bgt.n	800842c <__sflush_r+0x20>
 8008420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	dc02      	bgt.n	800842c <__sflush_r+0x20>
 8008426:	2000      	movs	r0, #0
 8008428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800842c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800842e:	2e00      	cmp	r6, #0
 8008430:	d0f9      	beq.n	8008426 <__sflush_r+0x1a>
 8008432:	2300      	movs	r3, #0
 8008434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008438:	682f      	ldr	r7, [r5, #0]
 800843a:	6a21      	ldr	r1, [r4, #32]
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	d032      	beq.n	80084a6 <__sflush_r+0x9a>
 8008440:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	075a      	lsls	r2, r3, #29
 8008446:	d505      	bpl.n	8008454 <__sflush_r+0x48>
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	1ac0      	subs	r0, r0, r3
 800844c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800844e:	b10b      	cbz	r3, 8008454 <__sflush_r+0x48>
 8008450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008452:	1ac0      	subs	r0, r0, r3
 8008454:	2300      	movs	r3, #0
 8008456:	4602      	mov	r2, r0
 8008458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800845a:	6a21      	ldr	r1, [r4, #32]
 800845c:	4628      	mov	r0, r5
 800845e:	47b0      	blx	r6
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	d106      	bne.n	8008474 <__sflush_r+0x68>
 8008466:	6829      	ldr	r1, [r5, #0]
 8008468:	291d      	cmp	r1, #29
 800846a:	d848      	bhi.n	80084fe <__sflush_r+0xf2>
 800846c:	4a29      	ldr	r2, [pc, #164]	; (8008514 <__sflush_r+0x108>)
 800846e:	40ca      	lsrs	r2, r1
 8008470:	07d6      	lsls	r6, r2, #31
 8008472:	d544      	bpl.n	80084fe <__sflush_r+0xf2>
 8008474:	2200      	movs	r2, #0
 8008476:	6062      	str	r2, [r4, #4]
 8008478:	04d9      	lsls	r1, r3, #19
 800847a:	6922      	ldr	r2, [r4, #16]
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	d504      	bpl.n	800848a <__sflush_r+0x7e>
 8008480:	1c42      	adds	r2, r0, #1
 8008482:	d101      	bne.n	8008488 <__sflush_r+0x7c>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	b903      	cbnz	r3, 800848a <__sflush_r+0x7e>
 8008488:	6560      	str	r0, [r4, #84]	; 0x54
 800848a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800848c:	602f      	str	r7, [r5, #0]
 800848e:	2900      	cmp	r1, #0
 8008490:	d0c9      	beq.n	8008426 <__sflush_r+0x1a>
 8008492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008496:	4299      	cmp	r1, r3
 8008498:	d002      	beq.n	80084a0 <__sflush_r+0x94>
 800849a:	4628      	mov	r0, r5
 800849c:	f000 f8de 	bl	800865c <_free_r>
 80084a0:	2000      	movs	r0, #0
 80084a2:	6360      	str	r0, [r4, #52]	; 0x34
 80084a4:	e7c0      	b.n	8008428 <__sflush_r+0x1c>
 80084a6:	2301      	movs	r3, #1
 80084a8:	4628      	mov	r0, r5
 80084aa:	47b0      	blx	r6
 80084ac:	1c41      	adds	r1, r0, #1
 80084ae:	d1c8      	bne.n	8008442 <__sflush_r+0x36>
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0c5      	beq.n	8008442 <__sflush_r+0x36>
 80084b6:	2b1d      	cmp	r3, #29
 80084b8:	d001      	beq.n	80084be <__sflush_r+0xb2>
 80084ba:	2b16      	cmp	r3, #22
 80084bc:	d101      	bne.n	80084c2 <__sflush_r+0xb6>
 80084be:	602f      	str	r7, [r5, #0]
 80084c0:	e7b1      	b.n	8008426 <__sflush_r+0x1a>
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c8:	81a3      	strh	r3, [r4, #12]
 80084ca:	e7ad      	b.n	8008428 <__sflush_r+0x1c>
 80084cc:	690f      	ldr	r7, [r1, #16]
 80084ce:	2f00      	cmp	r7, #0
 80084d0:	d0a9      	beq.n	8008426 <__sflush_r+0x1a>
 80084d2:	0793      	lsls	r3, r2, #30
 80084d4:	680e      	ldr	r6, [r1, #0]
 80084d6:	bf08      	it	eq
 80084d8:	694b      	ldreq	r3, [r1, #20]
 80084da:	600f      	str	r7, [r1, #0]
 80084dc:	bf18      	it	ne
 80084de:	2300      	movne	r3, #0
 80084e0:	eba6 0807 	sub.w	r8, r6, r7
 80084e4:	608b      	str	r3, [r1, #8]
 80084e6:	f1b8 0f00 	cmp.w	r8, #0
 80084ea:	dd9c      	ble.n	8008426 <__sflush_r+0x1a>
 80084ec:	4643      	mov	r3, r8
 80084ee:	463a      	mov	r2, r7
 80084f0:	6a21      	ldr	r1, [r4, #32]
 80084f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b0      	blx	r6
 80084f8:	2800      	cmp	r0, #0
 80084fa:	dc06      	bgt.n	800850a <__sflush_r+0xfe>
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008502:	81a3      	strh	r3, [r4, #12]
 8008504:	f04f 30ff 	mov.w	r0, #4294967295
 8008508:	e78e      	b.n	8008428 <__sflush_r+0x1c>
 800850a:	4407      	add	r7, r0
 800850c:	eba8 0800 	sub.w	r8, r8, r0
 8008510:	e7e9      	b.n	80084e6 <__sflush_r+0xda>
 8008512:	bf00      	nop
 8008514:	20400001 	.word	0x20400001

08008518 <_fflush_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	690b      	ldr	r3, [r1, #16]
 800851c:	4605      	mov	r5, r0
 800851e:	460c      	mov	r4, r1
 8008520:	b1db      	cbz	r3, 800855a <_fflush_r+0x42>
 8008522:	b118      	cbz	r0, 800852c <_fflush_r+0x14>
 8008524:	6983      	ldr	r3, [r0, #24]
 8008526:	b90b      	cbnz	r3, 800852c <_fflush_r+0x14>
 8008528:	f7ff fa58 	bl	80079dc <__sinit>
 800852c:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <_fflush_r+0x48>)
 800852e:	429c      	cmp	r4, r3
 8008530:	d109      	bne.n	8008546 <_fflush_r+0x2e>
 8008532:	686c      	ldr	r4, [r5, #4]
 8008534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008538:	b17b      	cbz	r3, 800855a <_fflush_r+0x42>
 800853a:	4621      	mov	r1, r4
 800853c:	4628      	mov	r0, r5
 800853e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008542:	f7ff bf63 	b.w	800840c <__sflush_r>
 8008546:	4b07      	ldr	r3, [pc, #28]	; (8008564 <_fflush_r+0x4c>)
 8008548:	429c      	cmp	r4, r3
 800854a:	d101      	bne.n	8008550 <_fflush_r+0x38>
 800854c:	68ac      	ldr	r4, [r5, #8]
 800854e:	e7f1      	b.n	8008534 <_fflush_r+0x1c>
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <_fflush_r+0x50>)
 8008552:	429c      	cmp	r4, r3
 8008554:	bf08      	it	eq
 8008556:	68ec      	ldreq	r4, [r5, #12]
 8008558:	e7ec      	b.n	8008534 <_fflush_r+0x1c>
 800855a:	2000      	movs	r0, #0
 800855c:	bd38      	pop	{r3, r4, r5, pc}
 800855e:	bf00      	nop
 8008560:	080088c4 	.word	0x080088c4
 8008564:	080088e4 	.word	0x080088e4
 8008568:	080088a4 	.word	0x080088a4

0800856c <_lseek_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4c07      	ldr	r4, [pc, #28]	; (800858c <_lseek_r+0x20>)
 8008570:	4605      	mov	r5, r0
 8008572:	4608      	mov	r0, r1
 8008574:	4611      	mov	r1, r2
 8008576:	2200      	movs	r2, #0
 8008578:	6022      	str	r2, [r4, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	f7f8 fbfa 	bl	8000d74 <_lseek>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_lseek_r+0x1e>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	b103      	cbz	r3, 800858a <_lseek_r+0x1e>
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	20000a48 	.word	0x20000a48

08008590 <__swhatbuf_r>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	460e      	mov	r6, r1
 8008594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008598:	2900      	cmp	r1, #0
 800859a:	b096      	sub	sp, #88	; 0x58
 800859c:	4614      	mov	r4, r2
 800859e:	461d      	mov	r5, r3
 80085a0:	da07      	bge.n	80085b2 <__swhatbuf_r+0x22>
 80085a2:	2300      	movs	r3, #0
 80085a4:	602b      	str	r3, [r5, #0]
 80085a6:	89b3      	ldrh	r3, [r6, #12]
 80085a8:	061a      	lsls	r2, r3, #24
 80085aa:	d410      	bmi.n	80085ce <__swhatbuf_r+0x3e>
 80085ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b0:	e00e      	b.n	80085d0 <__swhatbuf_r+0x40>
 80085b2:	466a      	mov	r2, sp
 80085b4:	f000 f8b2 	bl	800871c <_fstat_r>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	dbf2      	blt.n	80085a2 <__swhatbuf_r+0x12>
 80085bc:	9a01      	ldr	r2, [sp, #4]
 80085be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085c6:	425a      	negs	r2, r3
 80085c8:	415a      	adcs	r2, r3
 80085ca:	602a      	str	r2, [r5, #0]
 80085cc:	e7ee      	b.n	80085ac <__swhatbuf_r+0x1c>
 80085ce:	2340      	movs	r3, #64	; 0x40
 80085d0:	2000      	movs	r0, #0
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	b016      	add	sp, #88	; 0x58
 80085d6:	bd70      	pop	{r4, r5, r6, pc}

080085d8 <__smakebuf_r>:
 80085d8:	898b      	ldrh	r3, [r1, #12]
 80085da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085dc:	079d      	lsls	r5, r3, #30
 80085de:	4606      	mov	r6, r0
 80085e0:	460c      	mov	r4, r1
 80085e2:	d507      	bpl.n	80085f4 <__smakebuf_r+0x1c>
 80085e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	6123      	str	r3, [r4, #16]
 80085ec:	2301      	movs	r3, #1
 80085ee:	6163      	str	r3, [r4, #20]
 80085f0:	b002      	add	sp, #8
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	ab01      	add	r3, sp, #4
 80085f6:	466a      	mov	r2, sp
 80085f8:	f7ff ffca 	bl	8008590 <__swhatbuf_r>
 80085fc:	9900      	ldr	r1, [sp, #0]
 80085fe:	4605      	mov	r5, r0
 8008600:	4630      	mov	r0, r6
 8008602:	f7ff fa75 	bl	8007af0 <_malloc_r>
 8008606:	b948      	cbnz	r0, 800861c <__smakebuf_r+0x44>
 8008608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860c:	059a      	lsls	r2, r3, #22
 800860e:	d4ef      	bmi.n	80085f0 <__smakebuf_r+0x18>
 8008610:	f023 0303 	bic.w	r3, r3, #3
 8008614:	f043 0302 	orr.w	r3, r3, #2
 8008618:	81a3      	strh	r3, [r4, #12]
 800861a:	e7e3      	b.n	80085e4 <__smakebuf_r+0xc>
 800861c:	4b0d      	ldr	r3, [pc, #52]	; (8008654 <__smakebuf_r+0x7c>)
 800861e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	6020      	str	r0, [r4, #0]
 8008624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008628:	81a3      	strh	r3, [r4, #12]
 800862a:	9b00      	ldr	r3, [sp, #0]
 800862c:	6163      	str	r3, [r4, #20]
 800862e:	9b01      	ldr	r3, [sp, #4]
 8008630:	6120      	str	r0, [r4, #16]
 8008632:	b15b      	cbz	r3, 800864c <__smakebuf_r+0x74>
 8008634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008638:	4630      	mov	r0, r6
 800863a:	f000 f881 	bl	8008740 <_isatty_r>
 800863e:	b128      	cbz	r0, 800864c <__smakebuf_r+0x74>
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	f023 0303 	bic.w	r3, r3, #3
 8008646:	f043 0301 	orr.w	r3, r3, #1
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	431d      	orrs	r5, r3
 8008650:	81a5      	strh	r5, [r4, #12]
 8008652:	e7cd      	b.n	80085f0 <__smakebuf_r+0x18>
 8008654:	080079a5 	.word	0x080079a5

08008658 <__malloc_lock>:
 8008658:	4770      	bx	lr

0800865a <__malloc_unlock>:
 800865a:	4770      	bx	lr

0800865c <_free_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4605      	mov	r5, r0
 8008660:	2900      	cmp	r1, #0
 8008662:	d045      	beq.n	80086f0 <_free_r+0x94>
 8008664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008668:	1f0c      	subs	r4, r1, #4
 800866a:	2b00      	cmp	r3, #0
 800866c:	bfb8      	it	lt
 800866e:	18e4      	addlt	r4, r4, r3
 8008670:	f7ff fff2 	bl	8008658 <__malloc_lock>
 8008674:	4a1f      	ldr	r2, [pc, #124]	; (80086f4 <_free_r+0x98>)
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	4610      	mov	r0, r2
 800867a:	b933      	cbnz	r3, 800868a <_free_r+0x2e>
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	6014      	str	r4, [r2, #0]
 8008680:	4628      	mov	r0, r5
 8008682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008686:	f7ff bfe8 	b.w	800865a <__malloc_unlock>
 800868a:	42a3      	cmp	r3, r4
 800868c:	d90c      	bls.n	80086a8 <_free_r+0x4c>
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	1862      	adds	r2, r4, r1
 8008692:	4293      	cmp	r3, r2
 8008694:	bf04      	itt	eq
 8008696:	681a      	ldreq	r2, [r3, #0]
 8008698:	685b      	ldreq	r3, [r3, #4]
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	bf04      	itt	eq
 800869e:	1852      	addeq	r2, r2, r1
 80086a0:	6022      	streq	r2, [r4, #0]
 80086a2:	6004      	str	r4, [r0, #0]
 80086a4:	e7ec      	b.n	8008680 <_free_r+0x24>
 80086a6:	4613      	mov	r3, r2
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	b10a      	cbz	r2, 80086b0 <_free_r+0x54>
 80086ac:	42a2      	cmp	r2, r4
 80086ae:	d9fa      	bls.n	80086a6 <_free_r+0x4a>
 80086b0:	6819      	ldr	r1, [r3, #0]
 80086b2:	1858      	adds	r0, r3, r1
 80086b4:	42a0      	cmp	r0, r4
 80086b6:	d10b      	bne.n	80086d0 <_free_r+0x74>
 80086b8:	6820      	ldr	r0, [r4, #0]
 80086ba:	4401      	add	r1, r0
 80086bc:	1858      	adds	r0, r3, r1
 80086be:	4282      	cmp	r2, r0
 80086c0:	6019      	str	r1, [r3, #0]
 80086c2:	d1dd      	bne.n	8008680 <_free_r+0x24>
 80086c4:	6810      	ldr	r0, [r2, #0]
 80086c6:	6852      	ldr	r2, [r2, #4]
 80086c8:	605a      	str	r2, [r3, #4]
 80086ca:	4401      	add	r1, r0
 80086cc:	6019      	str	r1, [r3, #0]
 80086ce:	e7d7      	b.n	8008680 <_free_r+0x24>
 80086d0:	d902      	bls.n	80086d8 <_free_r+0x7c>
 80086d2:	230c      	movs	r3, #12
 80086d4:	602b      	str	r3, [r5, #0]
 80086d6:	e7d3      	b.n	8008680 <_free_r+0x24>
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	1821      	adds	r1, r4, r0
 80086dc:	428a      	cmp	r2, r1
 80086de:	bf04      	itt	eq
 80086e0:	6811      	ldreq	r1, [r2, #0]
 80086e2:	6852      	ldreq	r2, [r2, #4]
 80086e4:	6062      	str	r2, [r4, #4]
 80086e6:	bf04      	itt	eq
 80086e8:	1809      	addeq	r1, r1, r0
 80086ea:	6021      	streq	r1, [r4, #0]
 80086ec:	605c      	str	r4, [r3, #4]
 80086ee:	e7c7      	b.n	8008680 <_free_r+0x24>
 80086f0:	bd38      	pop	{r3, r4, r5, pc}
 80086f2:	bf00      	nop
 80086f4:	20000148 	.word	0x20000148

080086f8 <_read_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4c07      	ldr	r4, [pc, #28]	; (8008718 <_read_r+0x20>)
 80086fc:	4605      	mov	r5, r0
 80086fe:	4608      	mov	r0, r1
 8008700:	4611      	mov	r1, r2
 8008702:	2200      	movs	r2, #0
 8008704:	6022      	str	r2, [r4, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	f7f8 fad4 	bl	8000cb4 <_read>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_read_r+0x1e>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	b103      	cbz	r3, 8008716 <_read_r+0x1e>
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	20000a48 	.word	0x20000a48

0800871c <_fstat_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4c07      	ldr	r4, [pc, #28]	; (800873c <_fstat_r+0x20>)
 8008720:	2300      	movs	r3, #0
 8008722:	4605      	mov	r5, r0
 8008724:	4608      	mov	r0, r1
 8008726:	4611      	mov	r1, r2
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	f7f8 fb08 	bl	8000d3e <_fstat>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	d102      	bne.n	8008738 <_fstat_r+0x1c>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	b103      	cbz	r3, 8008738 <_fstat_r+0x1c>
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	bd38      	pop	{r3, r4, r5, pc}
 800873a:	bf00      	nop
 800873c:	20000a48 	.word	0x20000a48

08008740 <_isatty_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4c06      	ldr	r4, [pc, #24]	; (800875c <_isatty_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4605      	mov	r5, r0
 8008748:	4608      	mov	r0, r1
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	f7f8 fb07 	bl	8000d5e <_isatty>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_isatty_r+0x1a>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	b103      	cbz	r3, 800875a <_isatty_r+0x1a>
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	20000a48 	.word	0x20000a48

08008760 <_init>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr

0800876c <_fini>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	bf00      	nop
 8008770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008772:	bc08      	pop	{r3}
 8008774:	469e      	mov	lr, r3
 8008776:	4770      	bx	lr
