# automatically generated by the FlatBuffers compiler, do not modify

# namespace: BridgeMessages

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CaptureRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCaptureRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CaptureRequest()
        x.Init(buf, n + offset)
        return x

    # CaptureRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CaptureRequest
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # CaptureRequest
    def NSamples(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CaptureRequest
    def Window(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def CaptureRequestStart(builder): builder.StartObject(3)
def CaptureRequestAddChannel(builder, channel): builder.PrependInt8Slot(0, channel, 0)
def CaptureRequestAddNSamples(builder, nSamples): builder.PrependUint32Slot(1, nSamples, 0)
def CaptureRequestAddWindow(builder, window): builder.PrependInt8Slot(2, window, 0)
def CaptureRequestEnd(builder): return builder.EndObject()
